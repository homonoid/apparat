# The file was automatically generated by Lark v0.7.2
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    If GPL is incompatible with your free or open-source project,
#    contact me and we'll work it out (for free).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    def __init__(self, tree, orig_exc):
        self.tree = tree
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (tree.data, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return create_decorator(f.__func__, True)

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return sre_parse.parse(regexp).getwidth()
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                if getattr(f, 'meta', False):
                    return f(children, tree.meta)
                elif getattr(f, 'inline', False):
                    return f(*children)
                elif getattr(f, 'whole_tree', False):
                    if new_children is not None:
                        tree.children = new_children
                    return f(tree)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree, e)

    def _transform_children(self, children):
        for c in children:
            try:
                yield self._transform_tree(c) if isinstance(c, Tree) else c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        f = getattr(self, tree.data, self.__default__)
        f(tree)
        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, inline=False, meta=False, whole_tree=False, static=False):
    assert [whole_tree, meta, inline].count(True) <= 1
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.inline = inline
    f.meta = meta
    f.whole_tree = whole_tree
    return f

def v_args(inline=False, meta=False, tree=False):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if [tree, meta, inline].count(True) > 1:
        raise ValueError("Visitor functions can either accept tree, or meta, or be inlined. These cannot be combined.")
    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, inline=inline, meta=meta, whole_tree=tree)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):
    __serialize_fields__ = 'value', 'flags'

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    type = "str"
    
    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = Str(value)
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            for mre, type_from_index in lexer.mres:
                m = mre.match(stream, line_ctr.char_pos)
                if not m:
                    continue

                t = None
                value = m.group(0)
                type_ = type_from_index[m.lastindex]
                if type_ not in ignore_types:
                    t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    if t.type in lexer.callback:
                        t = lexer.callback[t.type](t)
                        if not isinstance(t, Token):
                            raise ValueError("Callbacks must return a token (returned %r)" % t)
                    last_token = t
                    yield t
                else:
                    if type_ in lexer.callback:
                        t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                        lexer.callback[type_](t)

                line_ctr.feed(value, type_ in newline_types)
                if t:
                    t.end_line = line_ctr.line
                    t.end_column = line_ctr.column

                break
            else:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])


class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]))
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, match_whole=False):
    return _build_mres(terminals, len(terminals), match_whole)

def _regexp_has_newline(r):
    """Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
    """
    return '\n' in r or '\\n' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]

        set_parser_state(self, state)   # Optional
    """
    set_parser_state = NotImplemented
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp())
            except:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build()

    def build(self):
        terminals, self.callback = _create_unless(self.terminals)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals)


    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):
    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks)

        self.set_parser_state(None) # Needs to be set on the outside

    def set_parser_state(self, state):
        self.parser_state = state

    def lex(self, stream):
        l = _Lex(self.lexers[self.parser_state], self.parser_state)
        for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
            yield x
            l.lexer = self.lexers[self.parser_state]
            l.state = self.parser_state



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.pos_in_stream + len(c.value)
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders and options else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                assert not getattr(f, 'meta', False), "Meta args not supported for internal transformer"
                # XXX InlineTransformer is deprecated!
                if getattr(f, 'inline', False) or isinstance(transformer, InlineTransformer):
                    f = ptb_inline_args(f)
                elif hasattr(f, 'whole_tree') or isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options is None or r.options.priority is None
                   for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lookahead()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            if _action is Shift:
                assert arg == end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')

class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, text):
        stream = self.lexer.lex(text)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        sps = self.lexer.set_parser_state
        return self._parse(token_stream, start, *[sps] if sps is not NotImplemented else [])

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
        parser - Decides which parser engine to use, "earley" or "lalr". (Default: "earley")
                 Note: "lalr" requires a lexer

        lexer - Decides whether or not to use a lexer stage
            "standard": Use a standard lexer
            "contextual": Stronger lexer (only works with parser="lalr")
            "dynamic": Flexible and powerful (only with parser="earley")
            "dynamic_complete": Same as dynamic, but tries *every* variation
                                of tokenizing possible. (only with parser="earley")
            "auto" (default): Choose for me based on grammar and parser

        ambiguity - Decides how to handle ambiguity in the parse. Only relevant if parser="earley"
            "resolve": The parser will automatically choose the simplest derivation
                       (it chooses consistently: greedy for tokens, non-greedy for rules)
            "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).

        transformer - Applies the transformer to every parse tree
        debug - Affects verbosity (default: False)
        keep_all_tokens - Don't automagically remove "punctuation" tokens (default: False)
        cache_grammar - Cache the Lark grammar (Default: False)
        postlex - Lexer post-processing (Default: None) Only works with the standard and contextual lexers.
        start - The start symbol, either a string, or a list of strings for multiple possible starts (Default: "start")
        profile - Measure run-time usage in Lark. Read results from the profiler proprety (Default: False)
        priority - How priorities should be evaluated - auto, none, normal, invert (Default: auto)
        propagate_positions - Propagates [line, column, end_line, end_column] attributes into all tree branches.
        lexer_callbacks - Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
        maybe_placeholders - Experimental feature. Instead of omitting optional rules (i.e. rule?), replace them with None
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'profile': False,
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        return self.options[name]
    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Profiler:
    def __init__(self):
        self.total_time = defaultdict(float)
        self.cur_section = '__init__'
        self.last_enter_time = time.time()

    def enter_section(self, name):
        cur_time = time.time()
        self.total_time[self.cur_section] += cur_time - self.last_enter_time
        self.last_enter_time = cur_time
        self.cur_section = name

    def make_wrapper(self, name, f):
        def wrapper(*args, **kwargs):
            last_section = self.cur_section
            self.enter_section(name)
            try:
                return f(*args, **kwargs)
            finally:
                self.enter_section(last_section)

        return wrapper


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        assert not self.options.profile, "Feature temporarily disabled"
        # self.profiler = Profiler() if self.options.profile else None

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options and rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options and rule.options.priority is not None:
                    rule.options.priority = None
        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, self.options.lexer_callbacks)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOPTIONS:" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        options['transformer'] = transformer
        options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: 'FRACT', 1: 'ID', 2: 'atom', 3: 'LSQB', 4: 'call', 5: 'root', 6: 'LBRACE', 7: 'accessor', 8: 'expr', 9: 'range', 10: 'VBAR', 11: 'product', 12: 'compare', 13: 'HEX', 14: 'num', 15: 'sum', 16: 'node', 17: 'decl', 18: 'stmt', 19: 'LPAR', 20: 'OCT', 21: 'molecule', 22: 'text', 23: 'DBLQUOTE', 24: 'conj', 25: 'equ', 26: 'infix', 27: 'BIN', 28: 'MINUS', 29: 'field', 30: 'PLUS', 31: 'DECIMAL', 32: 'list', 33: 'MORETHAN', 34: '__ANON_1', 35: '__ANON_2', 36: 'IS', 37: 'STAR', 38: 'SLASH', 39: 'OR', 40: 'SEMICOLON', 41: 'AND', 42: 'LESSTHAN', 43: 'RPAR', 44: '$END', 45: 'DOT', 46: 'ELSE', 47: 'TO', 48: '_NL', 49: 'RBRACE', 50: 'CIRCUMFLEX', 51: 'MOD', 52: 'COMMA', 53: '__ANON_0', 54: 'RSQB', 55: 'EQUAL', 56: '__anon_plus_5', 57: '__anon_star_2', 58: '__anon_star_0', 59: 'INFIX', 60: '__anon_star_3', 61: 'TCHAR', 62: '__anon_star_1', 63: 'NOT', 64: '__anon_star_4'}, 'states': {0: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 5: (0, 6), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 16: (0, 17), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 1: {33: (1, {'@': 40}), 34: (1, {'@': 40}), 3: (1, {'@': 40}), 20: (1, {'@': 40}), 35: (1, {'@': 40}), 31: (1, {'@': 40}), 27: (1, {'@': 40}), 36: (1, {'@': 40}), 28: (1, {'@': 40}), 37: (1, {'@': 40}), 38: (1, {'@': 40}), 39: (1, {'@': 40}), 40: (1, {'@': 40}), 30: (1, {'@': 40}), 41: (1, {'@': 40}), 42: (1, {'@': 40}), 1: (1, {'@': 40}), 6: (1, {'@': 40}), 19: (1, {'@': 40}), 43: (1, {'@': 40}), 44: (1, {'@': 40}), 45: (1, {'@': 40}), 46: (1, {'@': 40}), 47: (1, {'@': 40}), 48: (1, {'@': 40}), 49: (1, {'@': 40}), 50: (1, {'@': 40}), 51: (1, {'@': 40}), 0: (1, {'@': 40}), 52: (1, {'@': 40}), 10: (1, {'@': 40}), 53: (1, {'@': 40}), 23: (1, {'@': 40}), 54: (1, {'@': 40}), 13: (1, {'@': 40})}, 2: {33: (1, {'@': 41}), 34: (1, {'@': 41}), 3: (1, {'@': 41}), 20: (1, {'@': 41}), 35: (1, {'@': 41}), 31: (1, {'@': 41}), 27: (1, {'@': 41}), 36: (1, {'@': 41}), 28: (1, {'@': 41}), 37: (1, {'@': 41}), 38: (1, {'@': 41}), 39: (1, {'@': 41}), 40: (1, {'@': 41}), 30: (1, {'@': 41}), 41: (1, {'@': 41}), 42: (1, {'@': 41}), 1: (0, 35), 6: (1, {'@': 41}), 19: (1, {'@': 41}), 43: (1, {'@': 41}), 44: (1, {'@': 41}), 45: (1, {'@': 41}), 46: (1, {'@': 41}), 47: (1, {'@': 41}), 48: (1, {'@': 41}), 49: (1, {'@': 41}), 50: (1, {'@': 41}), 51: (1, {'@': 41}), 0: (1, {'@': 41}), 52: (1, {'@': 41}), 10: (1, {'@': 41}), 53: (1, {'@': 41}), 23: (1, {'@': 41}), 54: (1, {'@': 41}), 13: (1, {'@': 41}), 55: (0, 34)}, 3: {33: (1, {'@': 42}), 34: (1, {'@': 42}), 3: (0, 40), 20: (1, {'@': 42}), 35: (1, {'@': 42}), 31: (1, {'@': 42}), 27: (1, {'@': 42}), 36: (1, {'@': 42}), 28: (1, {'@': 42}), 37: (1, {'@': 42}), 38: (1, {'@': 42}), 39: (1, {'@': 42}), 40: (1, {'@': 42}), 30: (1, {'@': 42}), 41: (1, {'@': 42}), 42: (1, {'@': 42}), 1: (1, {'@': 42}), 6: (1, {'@': 42}), 19: (0, 36), 43: (1, {'@': 42}), 44: (1, {'@': 42}), 45: (0, 41), 46: (1, {'@': 42}), 47: (0, 38), 48: (1, {'@': 42}), 49: (1, {'@': 42}), 50: (0, 37), 51: (1, {'@': 42}), 0: (1, {'@': 42}), 52: (1, {'@': 42}), 10: (1, {'@': 42}), 53: (1, {'@': 42}), 23: (1, {'@': 42}), 54: (1, {'@': 42}), 13: (1, {'@': 42}), 56: (0, 39)}, 4: {48: (0, 42), 0: (0, 1), 57: (0, 43), 2: (0, 44), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 13: (0, 14), 14: (0, 15), 19: (0, 45), 20: (0, 21), 22: (0, 23), 23: (0, 24), 54: (0, 46), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 5: {33: (1, {'@': 43}), 34: (1, {'@': 43}), 3: (1, {'@': 43}), 20: (1, {'@': 43}), 35: (1, {'@': 43}), 31: (1, {'@': 43}), 27: (1, {'@': 43}), 36: (1, {'@': 43}), 28: (1, {'@': 43}), 37: (1, {'@': 43}), 38: (1, {'@': 43}), 39: (1, {'@': 43}), 40: (1, {'@': 43}), 30: (1, {'@': 43}), 41: (1, {'@': 43}), 42: (1, {'@': 43}), 1: (1, {'@': 43}), 6: (1, {'@': 43}), 19: (1, {'@': 43}), 43: (1, {'@': 43}), 44: (1, {'@': 43}), 45: (1, {'@': 43}), 46: (1, {'@': 43}), 47: (1, {'@': 43}), 48: (1, {'@': 43}), 49: (1, {'@': 43}), 50: (1, {'@': 43}), 51: (1, {'@': 43}), 0: (1, {'@': 43}), 52: (1, {'@': 43}), 10: (1, {'@': 43}), 53: (1, {'@': 43}), 23: (1, {'@': 43}), 54: (1, {'@': 43}), 13: (1, {'@': 43})}, 6: {44: (0, 48)}, 7: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 16: (0, 49), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 48: (0, 50), 14: (0, 15), 15: (0, 16), 49: (0, 51), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 8: {33: (1, {'@': 44}), 34: (1, {'@': 44}), 3: (1, {'@': 44}), 20: (1, {'@': 44}), 35: (1, {'@': 44}), 31: (1, {'@': 44}), 27: (1, {'@': 44}), 36: (1, {'@': 44}), 28: (1, {'@': 44}), 37: (1, {'@': 44}), 38: (1, {'@': 44}), 39: (1, {'@': 44}), 40: (1, {'@': 44}), 30: (1, {'@': 44}), 41: (1, {'@': 44}), 42: (1, {'@': 44}), 1: (1, {'@': 44}), 6: (1, {'@': 44}), 19: (1, {'@': 44}), 43: (1, {'@': 44}), 44: (1, {'@': 44}), 45: (1, {'@': 44}), 46: (1, {'@': 44}), 47: (1, {'@': 44}), 48: (1, {'@': 44}), 49: (1, {'@': 44}), 50: (1, {'@': 44}), 51: (1, {'@': 44}), 0: (1, {'@': 44}), 52: (1, {'@': 44}), 10: (1, {'@': 44}), 53: (1, {'@': 44}), 23: (1, {'@': 44}), 54: (1, {'@': 44}), 13: (1, {'@': 44})}, 9: {33: (1, {'@': 45}), 34: (1, {'@': 45}), 3: (1, {'@': 45}), 20: (1, {'@': 45}), 35: (1, {'@': 45}), 31: (1, {'@': 45}), 27: (1, {'@': 45}), 36: (1, {'@': 45}), 28: (1, {'@': 45}), 37: (1, {'@': 45}), 38: (1, {'@': 45}), 39: (1, {'@': 45}), 40: (1, {'@': 45}), 30: (1, {'@': 45}), 41: (1, {'@': 45}), 42: (1, {'@': 45}), 1: (1, {'@': 45}), 6: (1, {'@': 45}), 19: (1, {'@': 45}), 43: (1, {'@': 45}), 44: (1, {'@': 45}), 45: (1, {'@': 45}), 46: (1, {'@': 45}), 47: (1, {'@': 45}), 48: (0, 52), 49: (1, {'@': 45}), 50: (1, {'@': 45}), 51: (1, {'@': 45}), 0: (1, {'@': 45}), 52: (1, {'@': 45}), 10: (1, {'@': 45}), 53: (1, {'@': 45}), 23: (1, {'@': 45}), 54: (1, {'@': 45}), 13: (1, {'@': 45})}, 10: {33: (1, {'@': 46}), 34: (1, {'@': 46}), 3: (1, {'@': 46}), 20: (1, {'@': 46}), 35: (1, {'@': 46}), 31: (1, {'@': 46}), 27: (1, {'@': 46}), 36: (1, {'@': 46}), 28: (1, {'@': 46}), 37: (1, {'@': 46}), 38: (1, {'@': 46}), 39: (1, {'@': 46}), 40: (1, {'@': 46}), 30: (1, {'@': 46}), 41: (1, {'@': 46}), 42: (1, {'@': 46}), 1: (1, {'@': 46}), 6: (1, {'@': 46}), 19: (1, {'@': 46}), 43: (1, {'@': 46}), 44: (1, {'@': 46}), 45: (1, {'@': 46}), 46: (1, {'@': 46}), 47: (1, {'@': 46}), 48: (1, {'@': 46}), 49: (1, {'@': 46}), 50: (1, {'@': 46}), 51: (1, {'@': 46}), 0: (1, {'@': 46}), 52: (1, {'@': 46}), 10: (1, {'@': 46}), 53: (1, {'@': 46}), 23: (1, {'@': 46}), 54: (1, {'@': 46}), 13: (1, {'@': 46})}, 11: {1: (0, 53)}, 12: {33: (1, {'@': 47}), 34: (1, {'@': 47}), 3: (1, {'@': 47}), 20: (1, {'@': 47}), 35: (1, {'@': 47}), 31: (1, {'@': 47}), 27: (1, {'@': 47}), 36: (1, {'@': 47}), 28: (0, 54), 37: (1, {'@': 47}), 38: (1, {'@': 47}), 39: (1, {'@': 47}), 40: (1, {'@': 47}), 30: (0, 55), 41: (1, {'@': 47}), 42: (1, {'@': 47}), 1: (1, {'@': 47}), 6: (1, {'@': 47}), 19: (1, {'@': 47}), 43: (1, {'@': 47}), 44: (1, {'@': 47}), 45: (1, {'@': 47}), 46: (1, {'@': 47}), 47: (1, {'@': 47}), 48: (1, {'@': 47}), 49: (1, {'@': 47}), 50: (1, {'@': 47}), 51: (1, {'@': 47}), 0: (1, {'@': 47}), 52: (1, {'@': 47}), 10: (1, {'@': 47}), 53: (1, {'@': 47}), 23: (1, {'@': 47}), 54: (1, {'@': 47}), 13: (1, {'@': 47})}, 13: {33: (1, {'@': 48}), 34: (1, {'@': 48}), 3: (1, {'@': 48}), 20: (1, {'@': 48}), 35: (1, {'@': 48}), 31: (1, {'@': 48}), 27: (1, {'@': 48}), 36: (0, 56), 28: (1, {'@': 48}), 37: (1, {'@': 48}), 38: (1, {'@': 48}), 39: (1, {'@': 48}), 40: (1, {'@': 48}), 30: (1, {'@': 48}), 41: (1, {'@': 48}), 42: (1, {'@': 48}), 1: (1, {'@': 48}), 6: (1, {'@': 48}), 19: (1, {'@': 48}), 43: (1, {'@': 48}), 44: (1, {'@': 48}), 45: (1, {'@': 48}), 46: (1, {'@': 48}), 47: (1, {'@': 48}), 48: (1, {'@': 48}), 49: (1, {'@': 48}), 50: (1, {'@': 48}), 51: (1, {'@': 48}), 0: (1, {'@': 48}), 52: (1, {'@': 48}), 10: (1, {'@': 48}), 53: (1, {'@': 48}), 23: (1, {'@': 48}), 54: (1, {'@': 48}), 13: (1, {'@': 48})}, 14: {33: (1, {'@': 49}), 34: (1, {'@': 49}), 3: (1, {'@': 49}), 20: (1, {'@': 49}), 35: (1, {'@': 49}), 31: (1, {'@': 49}), 27: (1, {'@': 49}), 36: (1, {'@': 49}), 28: (1, {'@': 49}), 37: (1, {'@': 49}), 38: (1, {'@': 49}), 39: (1, {'@': 49}), 40: (1, {'@': 49}), 30: (1, {'@': 49}), 41: (1, {'@': 49}), 42: (1, {'@': 49}), 1: (1, {'@': 49}), 6: (1, {'@': 49}), 19: (1, {'@': 49}), 43: (1, {'@': 49}), 44: (1, {'@': 49}), 45: (1, {'@': 49}), 46: (1, {'@': 49}), 47: (1, {'@': 49}), 48: (1, {'@': 49}), 49: (1, {'@': 49}), 50: (1, {'@': 49}), 51: (1, {'@': 49}), 0: (1, {'@': 49}), 52: (1, {'@': 49}), 10: (1, {'@': 49}), 53: (1, {'@': 49}), 23: (1, {'@': 49}), 54: (1, {'@': 49}), 13: (1, {'@': 49})}, 15: {33: (1, {'@': 50}), 34: (1, {'@': 50}), 3: (1, {'@': 50}), 20: (1, {'@': 50}), 35: (1, {'@': 50}), 31: (1, {'@': 50}), 27: (1, {'@': 50}), 36: (1, {'@': 50}), 28: (1, {'@': 50}), 37: (1, {'@': 50}), 38: (1, {'@': 50}), 39: (1, {'@': 50}), 40: (1, {'@': 50}), 30: (1, {'@': 50}), 41: (1, {'@': 50}), 42: (1, {'@': 50}), 1: (1, {'@': 50}), 6: (1, {'@': 50}), 19: (1, {'@': 50}), 43: (1, {'@': 50}), 44: (1, {'@': 50}), 45: (1, {'@': 50}), 46: (1, {'@': 50}), 47: (1, {'@': 50}), 48: (1, {'@': 50}), 49: (1, {'@': 50}), 50: (1, {'@': 50}), 51: (1, {'@': 50}), 0: (1, {'@': 50}), 52: (1, {'@': 50}), 10: (1, {'@': 50}), 53: (1, {'@': 50}), 23: (1, {'@': 50}), 54: (1, {'@': 50}), 13: (1, {'@': 50})}, 16: {33: (0, 59), 34: (0, 58), 3: (1, {'@': 51}), 20: (1, {'@': 51}), 35: (0, 60), 31: (1, {'@': 51}), 27: (1, {'@': 51}), 36: (1, {'@': 51}), 28: (1, {'@': 51}), 37: (1, {'@': 51}), 38: (1, {'@': 51}), 39: (1, {'@': 51}), 40: (1, {'@': 51}), 30: (1, {'@': 51}), 41: (1, {'@': 51}), 42: (0, 57), 1: (1, {'@': 51}), 6: (1, {'@': 51}), 19: (1, {'@': 51}), 43: (1, {'@': 51}), 44: (1, {'@': 51}), 45: (1, {'@': 51}), 46: (1, {'@': 51}), 47: (1, {'@': 51}), 48: (1, {'@': 51}), 49: (1, {'@': 51}), 50: (1, {'@': 51}), 51: (1, {'@': 51}), 0: (1, {'@': 51}), 52: (1, {'@': 51}), 10: (1, {'@': 51}), 53: (1, {'@': 51}), 23: (1, {'@': 51}), 54: (1, {'@': 51}), 13: (1, {'@': 51})}, 17: {44: (1, {'@': 52}), 40: (0, 61), 58: (0, 62), 48: (0, 63)}, 18: {33: (1, {'@': 53}), 34: (1, {'@': 53}), 3: (1, {'@': 53}), 20: (1, {'@': 53}), 35: (1, {'@': 53}), 31: (1, {'@': 53}), 27: (1, {'@': 53}), 36: (1, {'@': 53}), 28: (1, {'@': 53}), 37: (1, {'@': 53}), 38: (1, {'@': 53}), 39: (1, {'@': 53}), 40: (1, {'@': 53}), 30: (1, {'@': 53}), 41: (1, {'@': 53}), 42: (1, {'@': 53}), 1: (1, {'@': 53}), 6: (1, {'@': 53}), 19: (1, {'@': 53}), 43: (1, {'@': 53}), 44: (1, {'@': 53}), 45: (1, {'@': 53}), 46: (1, {'@': 53}), 47: (1, {'@': 53}), 49: (1, {'@': 53}), 48: (1, {'@': 53}), 50: (1, {'@': 53}), 51: (1, {'@': 53}), 0: (1, {'@': 53}), 52: (1, {'@': 53}), 10: (1, {'@': 53}), 53: (1, {'@': 53}), 23: (1, {'@': 53}), 54: (1, {'@': 53}), 13: (1, {'@': 53})}, 19: {33: (1, {'@': 54}), 34: (1, {'@': 54}), 3: (1, {'@': 54}), 20: (1, {'@': 54}), 35: (1, {'@': 54}), 31: (1, {'@': 54}), 27: (1, {'@': 54}), 36: (1, {'@': 54}), 28: (1, {'@': 54}), 37: (1, {'@': 54}), 38: (1, {'@': 54}), 39: (1, {'@': 54}), 40: (1, {'@': 54}), 30: (1, {'@': 54}), 41: (1, {'@': 54}), 42: (1, {'@': 54}), 1: (1, {'@': 54}), 6: (1, {'@': 54}), 19: (1, {'@': 54}), 43: (1, {'@': 54}), 44: (1, {'@': 54}), 45: (1, {'@': 54}), 46: (1, {'@': 54}), 47: (1, {'@': 54}), 48: (0, 64), 49: (1, {'@': 54}), 50: (1, {'@': 54}), 51: (1, {'@': 54}), 0: (1, {'@': 54}), 52: (1, {'@': 54}), 10: (1, {'@': 54}), 53: (1, {'@': 54}), 23: (1, {'@': 54}), 54: (1, {'@': 54}), 13: (1, {'@': 54})}, 20: {0: (0, 1), 2: (0, 65), 59: (0, 66), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 8: (0, 67), 31: (0, 32), 32: (0, 33)}, 21: {33: (1, {'@': 55}), 34: (1, {'@': 55}), 3: (1, {'@': 55}), 20: (1, {'@': 55}), 35: (1, {'@': 55}), 31: (1, {'@': 55}), 27: (1, {'@': 55}), 36: (1, {'@': 55}), 28: (1, {'@': 55}), 37: (1, {'@': 55}), 38: (1, {'@': 55}), 39: (1, {'@': 55}), 40: (1, {'@': 55}), 30: (1, {'@': 55}), 41: (1, {'@': 55}), 42: (1, {'@': 55}), 1: (1, {'@': 55}), 6: (1, {'@': 55}), 19: (1, {'@': 55}), 43: (1, {'@': 55}), 44: (1, {'@': 55}), 45: (1, {'@': 55}), 46: (1, {'@': 55}), 47: (1, {'@': 55}), 48: (1, {'@': 55}), 49: (1, {'@': 55}), 50: (1, {'@': 55}), 51: (1, {'@': 55}), 0: (1, {'@': 55}), 52: (1, {'@': 55}), 10: (1, {'@': 55}), 53: (1, {'@': 55}), 23: (1, {'@': 55}), 54: (1, {'@': 55}), 13: (1, {'@': 55})}, 22: {33: (1, {'@': 56}), 34: (1, {'@': 56}), 3: (1, {'@': 56}), 20: (1, {'@': 56}), 35: (1, {'@': 56}), 31: (1, {'@': 56}), 27: (1, {'@': 56}), 36: (1, {'@': 56}), 28: (1, {'@': 56}), 37: (0, 69), 38: (0, 70), 39: (1, {'@': 56}), 40: (1, {'@': 56}), 30: (1, {'@': 56}), 41: (1, {'@': 56}), 42: (1, {'@': 56}), 1: (1, {'@': 56}), 6: (1, {'@': 56}), 19: (1, {'@': 56}), 43: (1, {'@': 56}), 44: (1, {'@': 56}), 45: (1, {'@': 56}), 46: (1, {'@': 56}), 47: (1, {'@': 56}), 48: (1, {'@': 56}), 49: (1, {'@': 56}), 50: (1, {'@': 56}), 51: (0, 68), 0: (1, {'@': 56}), 52: (1, {'@': 56}), 10: (1, {'@': 56}), 53: (1, {'@': 56}), 23: (1, {'@': 56}), 54: (1, {'@': 56}), 13: (1, {'@': 56})}, 23: {33: (1, {'@': 57}), 34: (1, {'@': 57}), 3: (1, {'@': 57}), 20: (1, {'@': 57}), 35: (1, {'@': 57}), 31: (1, {'@': 57}), 27: (1, {'@': 57}), 36: (1, {'@': 57}), 28: (1, {'@': 57}), 37: (1, {'@': 57}), 38: (1, {'@': 57}), 39: (1, {'@': 57}), 40: (1, {'@': 57}), 30: (1, {'@': 57}), 41: (1, {'@': 57}), 42: (1, {'@': 57}), 1: (1, {'@': 57}), 6: (1, {'@': 57}), 19: (1, {'@': 57}), 43: (1, {'@': 57}), 44: (1, {'@': 57}), 45: (1, {'@': 57}), 46: (1, {'@': 57}), 47: (1, {'@': 57}), 48: (1, {'@': 57}), 49: (1, {'@': 57}), 50: (1, {'@': 57}), 51: (1, {'@': 57}), 0: (1, {'@': 57}), 52: (1, {'@': 57}), 10: (1, {'@': 57}), 53: (1, {'@': 57}), 23: (1, {'@': 57}), 54: (1, {'@': 57}), 13: (1, {'@': 57})}, 24: {60: (0, 71), 6: (0, 72), 61: (0, 73), 23: (0, 74)}, 25: {33: (1, {'@': 58}), 34: (1, {'@': 58}), 3: (1, {'@': 58}), 20: (1, {'@': 58}), 35: (1, {'@': 58}), 31: (1, {'@': 58}), 27: (1, {'@': 58}), 36: (1, {'@': 58}), 28: (1, {'@': 58}), 37: (1, {'@': 58}), 38: (1, {'@': 58}), 39: (1, {'@': 58}), 40: (1, {'@': 58}), 30: (1, {'@': 58}), 41: (1, {'@': 58}), 42: (1, {'@': 58}), 1: (1, {'@': 58}), 6: (1, {'@': 58}), 19: (1, {'@': 58}), 43: (1, {'@': 58}), 44: (1, {'@': 58}), 45: (1, {'@': 58}), 46: (1, {'@': 58}), 47: (1, {'@': 58}), 48: (1, {'@': 58}), 49: (1, {'@': 58}), 50: (1, {'@': 58}), 51: (1, {'@': 58}), 0: (1, {'@': 58}), 52: (1, {'@': 58}), 10: (1, {'@': 58}), 53: (0, 75), 23: (1, {'@': 58}), 54: (1, {'@': 58}), 13: (1, {'@': 58})}, 26: {33: (1, {'@': 59}), 34: (1, {'@': 59}), 3: (1, {'@': 59}), 20: (1, {'@': 59}), 35: (1, {'@': 59}), 31: (1, {'@': 59}), 27: (1, {'@': 59}), 36: (1, {'@': 59}), 28: (1, {'@': 59}), 37: (1, {'@': 59}), 38: (1, {'@': 59}), 39: (0, 77), 40: (1, {'@': 59}), 30: (1, {'@': 59}), 41: (0, 76), 42: (1, {'@': 59}), 1: (1, {'@': 59}), 6: (1, {'@': 59}), 19: (1, {'@': 59}), 43: (1, {'@': 59}), 44: (1, {'@': 59}), 45: (1, {'@': 59}), 46: (1, {'@': 59}), 47: (1, {'@': 59}), 48: (1, {'@': 59}), 49: (1, {'@': 59}), 50: (1, {'@': 59}), 51: (1, {'@': 59}), 0: (1, {'@': 59}), 52: (1, {'@': 59}), 10: (1, {'@': 59}), 53: (1, {'@': 59}), 23: (1, {'@': 59}), 54: (1, {'@': 59}), 13: (1, {'@': 59})}, 27: {33: (1, {'@': 60}), 34: (1, {'@': 60}), 3: (1, {'@': 60}), 20: (1, {'@': 60}), 35: (1, {'@': 60}), 31: (1, {'@': 60}), 27: (1, {'@': 60}), 36: (1, {'@': 60}), 28: (1, {'@': 60}), 37: (1, {'@': 60}), 38: (1, {'@': 60}), 39: (1, {'@': 60}), 40: (1, {'@': 60}), 30: (1, {'@': 60}), 41: (1, {'@': 60}), 42: (1, {'@': 60}), 1: (1, {'@': 60}), 6: (1, {'@': 60}), 19: (1, {'@': 60}), 43: (1, {'@': 60}), 44: (1, {'@': 60}), 45: (1, {'@': 60}), 46: (1, {'@': 60}), 47: (1, {'@': 60}), 49: (1, {'@': 60}), 48: (1, {'@': 60}), 50: (1, {'@': 60}), 51: (1, {'@': 60}), 0: (1, {'@': 60}), 52: (1, {'@': 60}), 10: (1, {'@': 60}), 53: (1, {'@': 60}), 23: (1, {'@': 60}), 54: (1, {'@': 60}), 13: (1, {'@': 60})}, 28: {33: (1, {'@': 61}), 34: (1, {'@': 61}), 3: (1, {'@': 61}), 20: (1, {'@': 61}), 35: (1, {'@': 61}), 31: (1, {'@': 61}), 27: (1, {'@': 61}), 36: (1, {'@': 61}), 28: (1, {'@': 61}), 37: (1, {'@': 61}), 38: (1, {'@': 61}), 39: (1, {'@': 61}), 40: (1, {'@': 61}), 30: (1, {'@': 61}), 41: (1, {'@': 61}), 42: (1, {'@': 61}), 1: (1, {'@': 61}), 6: (1, {'@': 61}), 19: (1, {'@': 61}), 43: (1, {'@': 61}), 44: (1, {'@': 61}), 45: (1, {'@': 61}), 46: (1, {'@': 61}), 47: (1, {'@': 61}), 48: (1, {'@': 61}), 49: (1, {'@': 61}), 50: (1, {'@': 61}), 51: (1, {'@': 61}), 0: (1, {'@': 61}), 52: (1, {'@': 61}), 10: (1, {'@': 61}), 53: (1, {'@': 61}), 23: (1, {'@': 61}), 54: (1, {'@': 61}), 13: (1, {'@': 61})}, 29: {22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 2: (0, 78), 6: (0, 7), 27: (0, 28), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 19: (0, 45), 20: (0, 21), 31: (0, 32), 32: (0, 33)}, 30: {33: (1, {'@': 62}), 34: (1, {'@': 62}), 3: (1, {'@': 62}), 20: (1, {'@': 62}), 35: (1, {'@': 62}), 31: (1, {'@': 62}), 27: (1, {'@': 62}), 36: (1, {'@': 62}), 28: (1, {'@': 62}), 37: (1, {'@': 62}), 38: (1, {'@': 62}), 39: (1, {'@': 62}), 40: (1, {'@': 62}), 30: (1, {'@': 62}), 41: (1, {'@': 62}), 42: (1, {'@': 62}), 1: (1, {'@': 62}), 6: (1, {'@': 62}), 19: (1, {'@': 62}), 43: (1, {'@': 62}), 44: (1, {'@': 62}), 45: (1, {'@': 62}), 46: (1, {'@': 62}), 47: (1, {'@': 62}), 48: (1, {'@': 62}), 49: (1, {'@': 62}), 50: (1, {'@': 62}), 51: (1, {'@': 62}), 0: (1, {'@': 62}), 52: (1, {'@': 62}), 10: (1, {'@': 62}), 53: (1, {'@': 62}), 23: (1, {'@': 62}), 54: (1, {'@': 62}), 13: (1, {'@': 62})}, 31: {22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 2: (0, 79), 6: (0, 7), 27: (0, 28), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 19: (0, 45), 20: (0, 21), 31: (0, 32), 32: (0, 33)}, 32: {33: (1, {'@': 63}), 34: (1, {'@': 63}), 3: (1, {'@': 63}), 20: (1, {'@': 63}), 35: (1, {'@': 63}), 31: (1, {'@': 63}), 27: (1, {'@': 63}), 36: (1, {'@': 63}), 28: (1, {'@': 63}), 37: (1, {'@': 63}), 38: (1, {'@': 63}), 39: (1, {'@': 63}), 40: (1, {'@': 63}), 30: (1, {'@': 63}), 41: (1, {'@': 63}), 42: (1, {'@': 63}), 1: (1, {'@': 63}), 6: (1, {'@': 63}), 19: (1, {'@': 63}), 43: (1, {'@': 63}), 44: (1, {'@': 63}), 45: (1, {'@': 63}), 46: (1, {'@': 63}), 47: (1, {'@': 63}), 48: (1, {'@': 63}), 49: (1, {'@': 63}), 50: (1, {'@': 63}), 51: (1, {'@': 63}), 0: (1, {'@': 63}), 52: (1, {'@': 63}), 10: (1, {'@': 63}), 53: (1, {'@': 63}), 23: (1, {'@': 63}), 54: (1, {'@': 63}), 13: (1, {'@': 63})}, 33: {33: (1, {'@': 64}), 34: (1, {'@': 64}), 3: (1, {'@': 64}), 20: (1, {'@': 64}), 35: (1, {'@': 64}), 31: (1, {'@': 64}), 27: (1, {'@': 64}), 36: (1, {'@': 64}), 28: (1, {'@': 64}), 37: (1, {'@': 64}), 38: (1, {'@': 64}), 39: (1, {'@': 64}), 40: (1, {'@': 64}), 30: (1, {'@': 64}), 41: (1, {'@': 64}), 42: (1, {'@': 64}), 1: (1, {'@': 64}), 6: (1, {'@': 64}), 19: (1, {'@': 64}), 43: (1, {'@': 64}), 44: (1, {'@': 64}), 45: (1, {'@': 64}), 46: (1, {'@': 64}), 47: (1, {'@': 64}), 48: (1, {'@': 64}), 49: (1, {'@': 64}), 50: (1, {'@': 64}), 51: (1, {'@': 64}), 0: (1, {'@': 64}), 52: (1, {'@': 64}), 10: (1, {'@': 64}), 53: (1, {'@': 64}), 23: (1, {'@': 64}), 54: (1, {'@': 64}), 13: (1, {'@': 64})}, 34: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 8: (0, 80), 31: (0, 32), 32: (0, 33)}, 35: {1: (0, 81)}, 36: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 48: (0, 82), 8: (0, 83), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33), 43: (0, 84)}, 37: {2: (0, 3), 22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 6: (0, 7), 27: (0, 28), 19: (0, 20), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 21: (0, 85), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 20: (0, 21), 31: (0, 32), 32: (0, 33)}, 38: {22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 2: (0, 86), 6: (0, 7), 27: (0, 28), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 19: (0, 45), 20: (0, 21), 31: (0, 32), 32: (0, 33)}, 39: {33: (1, {'@': 65}), 34: (1, {'@': 65}), 3: (1, {'@': 65}), 20: (1, {'@': 65}), 35: (1, {'@': 65}), 31: (1, {'@': 65}), 27: (1, {'@': 65}), 36: (1, {'@': 65}), 28: (1, {'@': 65}), 37: (1, {'@': 65}), 38: (1, {'@': 65}), 39: (1, {'@': 65}), 40: (1, {'@': 65}), 30: (1, {'@': 65}), 41: (1, {'@': 65}), 42: (1, {'@': 65}), 1: (1, {'@': 65}), 6: (1, {'@': 65}), 19: (1, {'@': 65}), 43: (1, {'@': 65}), 44: (1, {'@': 65}), 45: (0, 87), 46: (1, {'@': 65}), 47: (1, {'@': 65}), 48: (1, {'@': 65}), 49: (1, {'@': 65}), 50: (1, {'@': 65}), 51: (1, {'@': 65}), 0: (1, {'@': 65}), 52: (1, {'@': 65}), 10: (1, {'@': 65}), 53: (1, {'@': 65}), 23: (1, {'@': 65}), 54: (1, {'@': 65}), 13: (1, {'@': 65})}, 40: {22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 2: (0, 88), 6: (0, 7), 27: (0, 28), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 19: (0, 45), 20: (0, 21), 31: (0, 32), 32: (0, 33)}, 41: {1: (0, 89)}, 42: {0: (0, 1), 2: (0, 44), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 54: (0, 90), 13: (0, 14), 14: (0, 15), 48: (0, 91), 19: (0, 45), 20: (0, 21), 57: (0, 92), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 43: {22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 2: (0, 93), 6: (0, 7), 27: (0, 28), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 19: (0, 45), 20: (0, 21), 54: (0, 94), 31: (0, 32), 32: (0, 33), 48: (0, 95)}, 44: {28: (1, {'@': 66}), 0: (1, {'@': 66}), 3: (0, 40), 20: (1, {'@': 66}), 13: (1, {'@': 66}), 30: (1, {'@': 66}), 1: (1, {'@': 66}), 10: (1, {'@': 66}), 31: (1, {'@': 66}), 23: (1, {'@': 66}), 54: (1, {'@': 66}), 6: (1, {'@': 66}), 19: (0, 36), 27: (1, {'@': 66}), 48: (1, {'@': 66}), 47: (0, 38), 56: (0, 39), 45: (0, 41)}, 45: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 8: (0, 67), 31: (0, 32), 32: (0, 33)}, 46: {33: (1, {'@': 67}), 34: (1, {'@': 67}), 3: (1, {'@': 67}), 20: (1, {'@': 67}), 35: (1, {'@': 67}), 31: (1, {'@': 67}), 27: (1, {'@': 67}), 36: (1, {'@': 67}), 28: (1, {'@': 67}), 37: (1, {'@': 67}), 38: (1, {'@': 67}), 39: (1, {'@': 67}), 40: (1, {'@': 67}), 30: (1, {'@': 67}), 41: (1, {'@': 67}), 42: (1, {'@': 67}), 1: (1, {'@': 67}), 6: (1, {'@': 67}), 19: (1, {'@': 67}), 43: (1, {'@': 67}), 44: (1, {'@': 67}), 45: (1, {'@': 67}), 46: (1, {'@': 67}), 47: (1, {'@': 67}), 48: (1, {'@': 67}), 49: (1, {'@': 67}), 50: (1, {'@': 67}), 51: (1, {'@': 67}), 0: (1, {'@': 67}), 52: (1, {'@': 67}), 10: (1, {'@': 67}), 53: (1, {'@': 67}), 23: (1, {'@': 67}), 54: (1, {'@': 67}), 13: (1, {'@': 67})}, 47: {33: (1, {'@': 41}), 34: (1, {'@': 41}), 3: (1, {'@': 41}), 20: (1, {'@': 41}), 35: (1, {'@': 41}), 31: (1, {'@': 41}), 27: (1, {'@': 41}), 36: (1, {'@': 41}), 28: (1, {'@': 41}), 37: (1, {'@': 41}), 38: (1, {'@': 41}), 39: (1, {'@': 41}), 40: (1, {'@': 41}), 30: (1, {'@': 41}), 41: (1, {'@': 41}), 42: (1, {'@': 41}), 1: (1, {'@': 41}), 6: (1, {'@': 41}), 19: (1, {'@': 41}), 43: (1, {'@': 41}), 44: (1, {'@': 41}), 45: (1, {'@': 41}), 46: (1, {'@': 41}), 47: (1, {'@': 41}), 48: (1, {'@': 41}), 49: (1, {'@': 41}), 50: (1, {'@': 41}), 51: (1, {'@': 41}), 0: (1, {'@': 41}), 52: (1, {'@': 41}), 10: (1, {'@': 41}), 53: (1, {'@': 41}), 23: (1, {'@': 41}), 54: (1, {'@': 41}), 13: (1, {'@': 41})}, 48: {}, 49: {40: (0, 96), 58: (0, 97), 49: (0, 98), 48: (0, 99)}, 50: {0: (0, 1), 1: (0, 2), 16: (0, 100), 2: (0, 3), 49: (0, 101), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 51: {33: (1, {'@': 68}), 34: (1, {'@': 68}), 3: (1, {'@': 68}), 20: (1, {'@': 68}), 35: (1, {'@': 68}), 31: (1, {'@': 68}), 27: (1, {'@': 68}), 36: (1, {'@': 68}), 28: (1, {'@': 68}), 37: (1, {'@': 68}), 38: (1, {'@': 68}), 39: (1, {'@': 68}), 40: (1, {'@': 68}), 30: (1, {'@': 68}), 41: (1, {'@': 68}), 42: (1, {'@': 68}), 1: (1, {'@': 68}), 6: (1, {'@': 68}), 19: (1, {'@': 68}), 43: (1, {'@': 68}), 44: (1, {'@': 68}), 45: (1, {'@': 68}), 46: (1, {'@': 68}), 47: (1, {'@': 68}), 48: (1, {'@': 68}), 49: (1, {'@': 68}), 50: (1, {'@': 68}), 51: (1, {'@': 68}), 0: (1, {'@': 68}), 52: (1, {'@': 68}), 10: (1, {'@': 68}), 53: (1, {'@': 68}), 23: (1, {'@': 68}), 54: (1, {'@': 68}), 13: (1, {'@': 68})}, 52: {33: (1, {'@': 69}), 34: (1, {'@': 69}), 3: (1, {'@': 69}), 20: (1, {'@': 69}), 35: (1, {'@': 69}), 31: (1, {'@': 69}), 27: (1, {'@': 69}), 36: (1, {'@': 69}), 28: (1, {'@': 69}), 37: (1, {'@': 69}), 38: (1, {'@': 69}), 39: (1, {'@': 69}), 40: (1, {'@': 69}), 30: (1, {'@': 69}), 41: (1, {'@': 69}), 42: (1, {'@': 69}), 1: (1, {'@': 69}), 6: (1, {'@': 69}), 19: (1, {'@': 69}), 43: (1, {'@': 69}), 44: (1, {'@': 69}), 45: (1, {'@': 69}), 46: (1, {'@': 69}), 47: (1, {'@': 69}), 48: (1, {'@': 69}), 49: (1, {'@': 69}), 50: (1, {'@': 69}), 51: (1, {'@': 69}), 0: (1, {'@': 69}), 52: (1, {'@': 69}), 10: (1, {'@': 69}), 53: (1, {'@': 69}), 23: (1, {'@': 69}), 54: (1, {'@': 69}), 13: (1, {'@': 69})}, 53: {62: (0, 102), 52: (0, 103), 10: (0, 104)}, 54: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 13: (0, 14), 14: (0, 15), 19: (0, 20), 20: (0, 21), 15: (0, 105), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 55: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 13: (0, 14), 14: (0, 15), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33), 15: (0, 106)}, 56: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 63: (0, 107), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33), 25: (0, 108)}, 57: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 12: (0, 109), 31: (0, 32), 32: (0, 33)}, 58: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33), 12: (0, 110)}, 59: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 12: (0, 111), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 60: {0: (0, 1), 2: (0, 3), 3: (0, 4), 12: (0, 112), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 61: {44: (1, {'@': 70}), 0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 48: (0, 113), 16: (0, 114), 31: (0, 32), 32: (0, 33)}, 62: {44: (1, {'@': 71}), 40: (0, 115), 48: (0, 116)}, 63: {40: (1, {'@': 72}), 49: (1, {'@': 72}), 44: (1, {'@': 72}), 48: (1, {'@': 72})}, 64: {33: (1, {'@': 73}), 34: (1, {'@': 73}), 3: (1, {'@': 73}), 20: (1, {'@': 73}), 35: (1, {'@': 73}), 31: (1, {'@': 73}), 27: (1, {'@': 73}), 36: (1, {'@': 73}), 28: (1, {'@': 73}), 37: (1, {'@': 73}), 38: (1, {'@': 73}), 39: (1, {'@': 73}), 40: (1, {'@': 73}), 30: (1, {'@': 73}), 41: (1, {'@': 73}), 42: (1, {'@': 73}), 1: (1, {'@': 73}), 6: (1, {'@': 73}), 19: (1, {'@': 73}), 43: (1, {'@': 73}), 44: (1, {'@': 73}), 45: (1, {'@': 73}), 46: (1, {'@': 73}), 47: (1, {'@': 73}), 48: (1, {'@': 73}), 49: (1, {'@': 73}), 50: (1, {'@': 73}), 51: (1, {'@': 73}), 0: (1, {'@': 73}), 52: (1, {'@': 73}), 10: (1, {'@': 73}), 53: (1, {'@': 73}), 23: (1, {'@': 73}), 54: (1, {'@': 73}), 13: (1, {'@': 73})}, 65: {33: (1, {'@': 42}), 34: (1, {'@': 42}), 3: (0, 40), 20: (1, {'@': 42}), 35: (1, {'@': 42}), 31: (1, {'@': 42}), 27: (1, {'@': 42}), 36: (1, {'@': 42}), 28: (1, {'@': 42}), 37: (1, {'@': 42}), 38: (1, {'@': 42}), 39: (1, {'@': 42}), 40: (1, {'@': 42}), 30: (1, {'@': 42}), 41: (1, {'@': 42}), 42: (1, {'@': 42}), 1: (1, {'@': 42}), 6: (1, {'@': 42}), 19: (0, 36), 43: (0, 117), 44: (1, {'@': 42}), 45: (0, 41), 46: (1, {'@': 42}), 47: (0, 38), 48: (1, {'@': 42}), 49: (1, {'@': 42}), 50: (0, 37), 51: (1, {'@': 42}), 0: (1, {'@': 42}), 52: (1, {'@': 42}), 10: (1, {'@': 42}), 53: (1, {'@': 42}), 23: (1, {'@': 42}), 54: (1, {'@': 42}), 13: (1, {'@': 42}), 56: (0, 39)}, 66: {43: (0, 118)}, 67: {43: (0, 119)}, 68: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 120), 13: (0, 14), 14: (0, 15), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 69: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 121), 13: (0, 14), 14: (0, 15), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 70: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 13: (0, 14), 14: (0, 15), 19: (0, 20), 20: (0, 21), 21: (0, 22), 11: (0, 122), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 71: {23: (0, 123), 61: (0, 124), 6: (0, 125)}, 72: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 8: (0, 126), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 73: {61: (1, {'@': 74}), 23: (1, {'@': 74}), 6: (1, {'@': 74})}, 74: {33: (1, {'@': 75}), 34: (1, {'@': 75}), 3: (1, {'@': 75}), 20: (1, {'@': 75}), 35: (1, {'@': 75}), 31: (1, {'@': 75}), 27: (1, {'@': 75}), 36: (1, {'@': 75}), 28: (1, {'@': 75}), 37: (1, {'@': 75}), 38: (1, {'@': 75}), 39: (1, {'@': 75}), 40: (1, {'@': 75}), 30: (1, {'@': 75}), 41: (1, {'@': 75}), 42: (1, {'@': 75}), 1: (1, {'@': 75}), 6: (1, {'@': 75}), 19: (1, {'@': 75}), 43: (1, {'@': 75}), 44: (1, {'@': 75}), 45: (1, {'@': 75}), 46: (1, {'@': 75}), 47: (1, {'@': 75}), 48: (1, {'@': 75}), 49: (1, {'@': 75}), 50: (1, {'@': 75}), 51: (1, {'@': 75}), 0: (1, {'@': 75}), 52: (1, {'@': 75}), 10: (1, {'@': 75}), 53: (1, {'@': 75}), 23: (1, {'@': 75}), 54: (1, {'@': 75}), 13: (1, {'@': 75})}, 75: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 16: (0, 127), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 76: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33), 8: (0, 128)}, 77: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 8: (0, 129), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 78: {33: (1, {'@': 76}), 34: (1, {'@': 76}), 3: (0, 40), 20: (1, {'@': 76}), 35: (1, {'@': 76}), 31: (1, {'@': 76}), 27: (1, {'@': 76}), 36: (1, {'@': 76}), 28: (1, {'@': 76}), 37: (1, {'@': 76}), 38: (1, {'@': 76}), 39: (1, {'@': 76}), 40: (1, {'@': 76}), 30: (1, {'@': 76}), 41: (1, {'@': 76}), 42: (1, {'@': 76}), 1: (1, {'@': 76}), 6: (1, {'@': 76}), 19: (0, 36), 43: (1, {'@': 76}), 44: (1, {'@': 76}), 45: (0, 41), 46: (1, {'@': 76}), 47: (0, 38), 48: (1, {'@': 76}), 49: (1, {'@': 76}), 50: (1, {'@': 76}), 51: (1, {'@': 76}), 0: (1, {'@': 76}), 52: (1, {'@': 76}), 10: (1, {'@': 76}), 53: (1, {'@': 76}), 23: (1, {'@': 76}), 54: (1, {'@': 76}), 13: (1, {'@': 76}), 56: (0, 39)}, 79: {33: (1, {'@': 77}), 34: (1, {'@': 77}), 3: (0, 40), 20: (1, {'@': 77}), 35: (1, {'@': 77}), 31: (1, {'@': 77}), 27: (1, {'@': 77}), 36: (1, {'@': 77}), 28: (1, {'@': 77}), 37: (1, {'@': 77}), 38: (1, {'@': 77}), 39: (1, {'@': 77}), 40: (1, {'@': 77}), 30: (1, {'@': 77}), 41: (1, {'@': 77}), 42: (1, {'@': 77}), 1: (1, {'@': 77}), 6: (1, {'@': 77}), 19: (0, 36), 43: (1, {'@': 77}), 44: (1, {'@': 77}), 45: (0, 41), 46: (1, {'@': 77}), 47: (0, 38), 48: (1, {'@': 77}), 49: (1, {'@': 77}), 50: (1, {'@': 77}), 51: (1, {'@': 77}), 0: (1, {'@': 77}), 52: (1, {'@': 77}), 10: (1, {'@': 77}), 53: (1, {'@': 77}), 23: (1, {'@': 77}), 54: (1, {'@': 77}), 13: (1, {'@': 77}), 56: (0, 39)}, 80: {33: (1, {'@': 78}), 34: (1, {'@': 78}), 3: (1, {'@': 78}), 20: (1, {'@': 78}), 35: (1, {'@': 78}), 31: (1, {'@': 78}), 27: (1, {'@': 78}), 36: (1, {'@': 78}), 28: (1, {'@': 78}), 37: (1, {'@': 78}), 38: (1, {'@': 78}), 39: (1, {'@': 78}), 40: (1, {'@': 78}), 30: (1, {'@': 78}), 41: (1, {'@': 78}), 42: (1, {'@': 78}), 1: (1, {'@': 78}), 6: (1, {'@': 78}), 19: (1, {'@': 78}), 43: (1, {'@': 78}), 44: (1, {'@': 78}), 45: (1, {'@': 78}), 46: (1, {'@': 78}), 47: (1, {'@': 78}), 49: (1, {'@': 78}), 48: (1, {'@': 78}), 50: (1, {'@': 78}), 51: (1, {'@': 78}), 0: (1, {'@': 78}), 52: (1, {'@': 78}), 10: (1, {'@': 78}), 53: (1, {'@': 78}), 23: (1, {'@': 78}), 54: (1, {'@': 78}), 13: (1, {'@': 78})}, 81: {55: (0, 130)}, 82: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 43: (0, 131), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 8: (0, 132), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 83: {64: (0, 133), 48: (0, 134), 52: (0, 135), 43: (0, 136)}, 84: {33: (1, {'@': 79}), 34: (1, {'@': 79}), 3: (1, {'@': 79}), 20: (1, {'@': 79}), 35: (1, {'@': 79}), 31: (1, {'@': 79}), 27: (1, {'@': 79}), 36: (1, {'@': 79}), 28: (1, {'@': 79}), 37: (1, {'@': 79}), 38: (1, {'@': 79}), 39: (1, {'@': 79}), 40: (1, {'@': 79}), 30: (1, {'@': 79}), 41: (1, {'@': 79}), 42: (1, {'@': 79}), 1: (1, {'@': 79}), 6: (1, {'@': 79}), 19: (1, {'@': 79}), 43: (1, {'@': 79}), 44: (1, {'@': 79}), 45: (1, {'@': 79}), 46: (1, {'@': 79}), 47: (1, {'@': 79}), 48: (1, {'@': 79}), 49: (1, {'@': 79}), 50: (1, {'@': 79}), 51: (1, {'@': 79}), 0: (1, {'@': 79}), 52: (1, {'@': 79}), 10: (1, {'@': 79}), 53: (1, {'@': 79}), 23: (1, {'@': 79}), 54: (1, {'@': 79}), 13: (1, {'@': 79})}, 85: {33: (1, {'@': 80}), 34: (1, {'@': 80}), 3: (1, {'@': 80}), 20: (1, {'@': 80}), 35: (1, {'@': 80}), 31: (1, {'@': 80}), 27: (1, {'@': 80}), 36: (1, {'@': 80}), 28: (1, {'@': 80}), 37: (1, {'@': 80}), 38: (1, {'@': 80}), 39: (1, {'@': 80}), 40: (1, {'@': 80}), 30: (1, {'@': 80}), 41: (1, {'@': 80}), 42: (1, {'@': 80}), 1: (1, {'@': 80}), 6: (1, {'@': 80}), 19: (1, {'@': 80}), 43: (1, {'@': 80}), 44: (1, {'@': 80}), 45: (1, {'@': 80}), 46: (1, {'@': 80}), 47: (1, {'@': 80}), 48: (1, {'@': 80}), 49: (1, {'@': 80}), 50: (1, {'@': 80}), 51: (1, {'@': 80}), 0: (1, {'@': 80}), 52: (1, {'@': 80}), 10: (1, {'@': 80}), 53: (1, {'@': 80}), 23: (1, {'@': 80}), 54: (1, {'@': 80}), 13: (1, {'@': 80})}, 86: {33: (1, {'@': 81}), 34: (1, {'@': 81}), 3: (0, 40), 20: (1, {'@': 81}), 35: (1, {'@': 81}), 31: (1, {'@': 81}), 27: (1, {'@': 81}), 36: (1, {'@': 81}), 28: (1, {'@': 81}), 37: (1, {'@': 81}), 38: (1, {'@': 81}), 39: (1, {'@': 81}), 40: (1, {'@': 81}), 30: (1, {'@': 81}), 41: (1, {'@': 81}), 42: (1, {'@': 81}), 1: (1, {'@': 81}), 6: (1, {'@': 81}), 19: (0, 36), 43: (1, {'@': 81}), 44: (1, {'@': 81}), 45: (0, 41), 46: (1, {'@': 81}), 47: (0, 38), 48: (1, {'@': 81}), 49: (1, {'@': 81}), 50: (1, {'@': 81}), 51: (1, {'@': 81}), 0: (1, {'@': 81}), 52: (1, {'@': 81}), 10: (1, {'@': 81}), 53: (1, {'@': 81}), 23: (1, {'@': 81}), 54: (1, {'@': 81}), 13: (1, {'@': 81}), 56: (0, 39)}, 87: {1: (0, 137)}, 88: {19: (0, 36), 47: (0, 38), 56: (0, 39), 54: (0, 138), 3: (0, 40), 45: (0, 41)}, 89: {33: (1, {'@': 82}), 34: (1, {'@': 82}), 3: (1, {'@': 82}), 20: (1, {'@': 82}), 35: (1, {'@': 82}), 31: (1, {'@': 82}), 27: (1, {'@': 82}), 36: (1, {'@': 82}), 28: (1, {'@': 82}), 37: (1, {'@': 82}), 38: (1, {'@': 82}), 39: (1, {'@': 82}), 40: (1, {'@': 82}), 30: (1, {'@': 82}), 41: (1, {'@': 82}), 42: (1, {'@': 82}), 1: (1, {'@': 82}), 6: (1, {'@': 82}), 19: (1, {'@': 82}), 43: (1, {'@': 82}), 44: (1, {'@': 82}), 45: (1, {'@': 82}), 46: (1, {'@': 82}), 47: (1, {'@': 82}), 48: (1, {'@': 82}), 49: (1, {'@': 82}), 50: (1, {'@': 82}), 51: (1, {'@': 82}), 0: (1, {'@': 82}), 52: (1, {'@': 82}), 10: (1, {'@': 82}), 53: (1, {'@': 82}), 23: (1, {'@': 82}), 54: (1, {'@': 82}), 13: (1, {'@': 82})}, 90: {33: (1, {'@': 83}), 34: (1, {'@': 83}), 3: (1, {'@': 83}), 20: (1, {'@': 83}), 35: (1, {'@': 83}), 31: (1, {'@': 83}), 27: (1, {'@': 83}), 36: (1, {'@': 83}), 28: (1, {'@': 83}), 37: (1, {'@': 83}), 38: (1, {'@': 83}), 39: (1, {'@': 83}), 40: (1, {'@': 83}), 30: (1, {'@': 83}), 41: (1, {'@': 83}), 42: (1, {'@': 83}), 1: (1, {'@': 83}), 6: (1, {'@': 83}), 19: (1, {'@': 83}), 43: (1, {'@': 83}), 44: (1, {'@': 83}), 45: (1, {'@': 83}), 46: (1, {'@': 83}), 47: (1, {'@': 83}), 48: (1, {'@': 83}), 49: (1, {'@': 83}), 50: (1, {'@': 83}), 51: (1, {'@': 83}), 0: (1, {'@': 83}), 52: (1, {'@': 83}), 10: (1, {'@': 83}), 53: (1, {'@': 83}), 23: (1, {'@': 83}), 54: (1, {'@': 83}), 13: (1, {'@': 83})}, 91: {54: (0, 139)}, 92: {22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 2: (0, 93), 6: (0, 7), 27: (0, 28), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 48: (0, 140), 19: (0, 45), 20: (0, 21), 31: (0, 32), 32: (0, 33), 54: (0, 141)}, 93: {28: (1, {'@': 84}), 0: (1, {'@': 84}), 3: (0, 40), 20: (1, {'@': 84}), 13: (1, {'@': 84}), 30: (1, {'@': 84}), 1: (1, {'@': 84}), 10: (1, {'@': 84}), 31: (1, {'@': 84}), 23: (1, {'@': 84}), 54: (1, {'@': 84}), 6: (1, {'@': 84}), 19: (0, 36), 27: (1, {'@': 84}), 48: (1, {'@': 84}), 47: (0, 38), 56: (0, 39), 45: (0, 41)}, 94: {33: (1, {'@': 85}), 34: (1, {'@': 85}), 3: (1, {'@': 85}), 20: (1, {'@': 85}), 35: (1, {'@': 85}), 31: (1, {'@': 85}), 27: (1, {'@': 85}), 36: (1, {'@': 85}), 28: (1, {'@': 85}), 37: (1, {'@': 85}), 38: (1, {'@': 85}), 39: (1, {'@': 85}), 40: (1, {'@': 85}), 30: (1, {'@': 85}), 41: (1, {'@': 85}), 42: (1, {'@': 85}), 1: (1, {'@': 85}), 6: (1, {'@': 85}), 19: (1, {'@': 85}), 43: (1, {'@': 85}), 44: (1, {'@': 85}), 45: (1, {'@': 85}), 46: (1, {'@': 85}), 47: (1, {'@': 85}), 48: (1, {'@': 85}), 49: (1, {'@': 85}), 50: (1, {'@': 85}), 51: (1, {'@': 85}), 0: (1, {'@': 85}), 52: (1, {'@': 85}), 10: (1, {'@': 85}), 53: (1, {'@': 85}), 23: (1, {'@': 85}), 54: (1, {'@': 85}), 13: (1, {'@': 85})}, 95: {54: (0, 142)}, 96: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 48: (0, 143), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 49: (0, 144), 30: (0, 31), 16: (0, 114), 31: (0, 32), 32: (0, 33)}, 97: {40: (0, 145), 48: (0, 146), 49: (0, 147)}, 98: {33: (1, {'@': 86}), 34: (1, {'@': 86}), 3: (1, {'@': 86}), 20: (1, {'@': 86}), 35: (1, {'@': 86}), 31: (1, {'@': 86}), 27: (1, {'@': 86}), 36: (1, {'@': 86}), 28: (1, {'@': 86}), 37: (1, {'@': 86}), 38: (1, {'@': 86}), 39: (1, {'@': 86}), 40: (1, {'@': 86}), 30: (1, {'@': 86}), 41: (1, {'@': 86}), 42: (1, {'@': 86}), 1: (1, {'@': 86}), 6: (1, {'@': 86}), 19: (1, {'@': 86}), 43: (1, {'@': 86}), 44: (1, {'@': 86}), 45: (1, {'@': 86}), 46: (1, {'@': 86}), 47: (1, {'@': 86}), 48: (1, {'@': 86}), 49: (1, {'@': 86}), 50: (1, {'@': 86}), 51: (1, {'@': 86}), 0: (1, {'@': 86}), 52: (1, {'@': 86}), 10: (1, {'@': 86}), 53: (1, {'@': 86}), 23: (1, {'@': 86}), 54: (1, {'@': 86}), 13: (1, {'@': 86})}, 99: {40: (1, {'@': 72}), 49: (0, 148), 44: (1, {'@': 72}), 48: (1, {'@': 72})}, 100: {40: (0, 149), 58: (0, 150), 48: (0, 151), 49: (0, 152)}, 101: {33: (1, {'@': 87}), 34: (1, {'@': 87}), 3: (1, {'@': 87}), 20: (1, {'@': 87}), 35: (1, {'@': 87}), 31: (1, {'@': 87}), 27: (1, {'@': 87}), 36: (1, {'@': 87}), 28: (1, {'@': 87}), 37: (1, {'@': 87}), 38: (1, {'@': 87}), 39: (1, {'@': 87}), 40: (1, {'@': 87}), 30: (1, {'@': 87}), 41: (1, {'@': 87}), 42: (1, {'@': 87}), 1: (1, {'@': 87}), 6: (1, {'@': 87}), 19: (1, {'@': 87}), 43: (1, {'@': 87}), 44: (1, {'@': 87}), 45: (1, {'@': 87}), 46: (1, {'@': 87}), 47: (1, {'@': 87}), 48: (1, {'@': 87}), 49: (1, {'@': 87}), 50: (1, {'@': 87}), 51: (1, {'@': 87}), 0: (1, {'@': 87}), 52: (1, {'@': 87}), 10: (1, {'@': 87}), 53: (1, {'@': 87}), 23: (1, {'@': 87}), 54: (1, {'@': 87}), 13: (1, {'@': 87})}, 102: {10: (0, 153), 52: (0, 154)}, 103: {1: (0, 155)}, 104: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33), 8: (0, 156)}, 105: {33: (1, {'@': 88}), 34: (1, {'@': 88}), 3: (1, {'@': 88}), 20: (1, {'@': 88}), 35: (1, {'@': 88}), 31: (1, {'@': 88}), 27: (1, {'@': 88}), 36: (1, {'@': 88}), 28: (1, {'@': 88}), 37: (1, {'@': 88}), 38: (1, {'@': 88}), 39: (1, {'@': 88}), 40: (1, {'@': 88}), 30: (1, {'@': 88}), 41: (1, {'@': 88}), 42: (1, {'@': 88}), 1: (1, {'@': 88}), 6: (1, {'@': 88}), 19: (1, {'@': 88}), 43: (1, {'@': 88}), 44: (1, {'@': 88}), 45: (1, {'@': 88}), 46: (1, {'@': 88}), 47: (1, {'@': 88}), 48: (1, {'@': 88}), 49: (1, {'@': 88}), 50: (1, {'@': 88}), 51: (1, {'@': 88}), 0: (1, {'@': 88}), 52: (1, {'@': 88}), 10: (1, {'@': 88}), 53: (1, {'@': 88}), 23: (1, {'@': 88}), 54: (1, {'@': 88}), 13: (1, {'@': 88})}, 106: {33: (1, {'@': 89}), 34: (1, {'@': 89}), 3: (1, {'@': 89}), 20: (1, {'@': 89}), 35: (1, {'@': 89}), 31: (1, {'@': 89}), 27: (1, {'@': 89}), 36: (1, {'@': 89}), 28: (1, {'@': 89}), 37: (1, {'@': 89}), 38: (1, {'@': 89}), 39: (1, {'@': 89}), 40: (1, {'@': 89}), 30: (1, {'@': 89}), 41: (1, {'@': 89}), 42: (1, {'@': 89}), 1: (1, {'@': 89}), 6: (1, {'@': 89}), 19: (1, {'@': 89}), 43: (1, {'@': 89}), 44: (1, {'@': 89}), 45: (1, {'@': 89}), 46: (1, {'@': 89}), 47: (1, {'@': 89}), 48: (1, {'@': 89}), 49: (1, {'@': 89}), 50: (1, {'@': 89}), 51: (1, {'@': 89}), 0: (1, {'@': 89}), 52: (1, {'@': 89}), 10: (1, {'@': 89}), 53: (1, {'@': 89}), 23: (1, {'@': 89}), 54: (1, {'@': 89}), 13: (1, {'@': 89})}, 107: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33), 25: (0, 157)}, 108: {33: (1, {'@': 90}), 34: (1, {'@': 90}), 3: (1, {'@': 90}), 20: (1, {'@': 90}), 35: (1, {'@': 90}), 31: (1, {'@': 90}), 27: (1, {'@': 90}), 36: (1, {'@': 90}), 28: (1, {'@': 90}), 37: (1, {'@': 90}), 38: (1, {'@': 90}), 39: (1, {'@': 90}), 40: (1, {'@': 90}), 30: (1, {'@': 90}), 41: (1, {'@': 90}), 42: (1, {'@': 90}), 1: (1, {'@': 90}), 6: (1, {'@': 90}), 19: (1, {'@': 90}), 43: (1, {'@': 90}), 44: (1, {'@': 90}), 45: (1, {'@': 90}), 46: (1, {'@': 90}), 47: (1, {'@': 90}), 48: (1, {'@': 90}), 49: (1, {'@': 90}), 50: (1, {'@': 90}), 51: (1, {'@': 90}), 0: (1, {'@': 90}), 52: (1, {'@': 90}), 10: (1, {'@': 90}), 53: (1, {'@': 90}), 23: (1, {'@': 90}), 54: (1, {'@': 90}), 13: (1, {'@': 90})}, 109: {33: (1, {'@': 91}), 34: (1, {'@': 91}), 3: (1, {'@': 91}), 20: (1, {'@': 91}), 35: (1, {'@': 91}), 31: (1, {'@': 91}), 27: (1, {'@': 91}), 36: (1, {'@': 91}), 28: (1, {'@': 91}), 37: (1, {'@': 91}), 38: (1, {'@': 91}), 39: (1, {'@': 91}), 40: (1, {'@': 91}), 30: (1, {'@': 91}), 41: (1, {'@': 91}), 42: (1, {'@': 91}), 1: (1, {'@': 91}), 6: (1, {'@': 91}), 19: (1, {'@': 91}), 43: (1, {'@': 91}), 44: (1, {'@': 91}), 45: (1, {'@': 91}), 46: (1, {'@': 91}), 47: (1, {'@': 91}), 48: (1, {'@': 91}), 49: (1, {'@': 91}), 50: (1, {'@': 91}), 51: (1, {'@': 91}), 0: (1, {'@': 91}), 52: (1, {'@': 91}), 10: (1, {'@': 91}), 53: (1, {'@': 91}), 23: (1, {'@': 91}), 54: (1, {'@': 91}), 13: (1, {'@': 91})}, 110: {33: (1, {'@': 92}), 34: (1, {'@': 92}), 3: (1, {'@': 92}), 20: (1, {'@': 92}), 35: (1, {'@': 92}), 31: (1, {'@': 92}), 27: (1, {'@': 92}), 36: (1, {'@': 92}), 28: (1, {'@': 92}), 37: (1, {'@': 92}), 38: (1, {'@': 92}), 39: (1, {'@': 92}), 40: (1, {'@': 92}), 30: (1, {'@': 92}), 41: (1, {'@': 92}), 42: (1, {'@': 92}), 1: (1, {'@': 92}), 6: (1, {'@': 92}), 19: (1, {'@': 92}), 43: (1, {'@': 92}), 44: (1, {'@': 92}), 45: (1, {'@': 92}), 46: (1, {'@': 92}), 47: (1, {'@': 92}), 48: (1, {'@': 92}), 49: (1, {'@': 92}), 50: (1, {'@': 92}), 51: (1, {'@': 92}), 0: (1, {'@': 92}), 52: (1, {'@': 92}), 10: (1, {'@': 92}), 53: (1, {'@': 92}), 23: (1, {'@': 92}), 54: (1, {'@': 92}), 13: (1, {'@': 92})}, 111: {33: (1, {'@': 93}), 34: (1, {'@': 93}), 3: (1, {'@': 93}), 20: (1, {'@': 93}), 35: (1, {'@': 93}), 31: (1, {'@': 93}), 27: (1, {'@': 93}), 36: (1, {'@': 93}), 28: (1, {'@': 93}), 37: (1, {'@': 93}), 38: (1, {'@': 93}), 39: (1, {'@': 93}), 40: (1, {'@': 93}), 30: (1, {'@': 93}), 41: (1, {'@': 93}), 42: (1, {'@': 93}), 1: (1, {'@': 93}), 6: (1, {'@': 93}), 19: (1, {'@': 93}), 43: (1, {'@': 93}), 44: (1, {'@': 93}), 45: (1, {'@': 93}), 46: (1, {'@': 93}), 47: (1, {'@': 93}), 48: (1, {'@': 93}), 49: (1, {'@': 93}), 50: (1, {'@': 93}), 51: (1, {'@': 93}), 0: (1, {'@': 93}), 52: (1, {'@': 93}), 10: (1, {'@': 93}), 53: (1, {'@': 93}), 23: (1, {'@': 93}), 54: (1, {'@': 93}), 13: (1, {'@': 93})}, 112: {33: (1, {'@': 94}), 34: (1, {'@': 94}), 3: (1, {'@': 94}), 20: (1, {'@': 94}), 35: (1, {'@': 94}), 31: (1, {'@': 94}), 27: (1, {'@': 94}), 36: (1, {'@': 94}), 28: (1, {'@': 94}), 37: (1, {'@': 94}), 38: (1, {'@': 94}), 39: (1, {'@': 94}), 40: (1, {'@': 94}), 30: (1, {'@': 94}), 41: (1, {'@': 94}), 42: (1, {'@': 94}), 1: (1, {'@': 94}), 6: (1, {'@': 94}), 19: (1, {'@': 94}), 43: (1, {'@': 94}), 44: (1, {'@': 94}), 45: (1, {'@': 94}), 46: (1, {'@': 94}), 47: (1, {'@': 94}), 48: (1, {'@': 94}), 49: (1, {'@': 94}), 50: (1, {'@': 94}), 51: (1, {'@': 94}), 0: (1, {'@': 94}), 52: (1, {'@': 94}), 10: (1, {'@': 94}), 53: (1, {'@': 94}), 23: (1, {'@': 94}), 54: (1, {'@': 94}), 13: (1, {'@': 94})}, 113: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 16: (0, 158), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 114: {40: (1, {'@': 95}), 49: (1, {'@': 95}), 44: (1, {'@': 95}), 48: (1, {'@': 95})}, 115: {44: (1, {'@': 96}), 0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 16: (0, 159), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 48: (0, 160), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 116: {40: (1, {'@': 97}), 49: (1, {'@': 97}), 44: (1, {'@': 97}), 48: (1, {'@': 97})}, 117: {2: (0, 3), 22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 6: (0, 7), 27: (0, 28), 19: (0, 20), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 21: (0, 161), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 20: (0, 21), 31: (0, 32), 32: (0, 33)}, 118: {2: (0, 3), 22: (0, 23), 0: (0, 1), 23: (0, 24), 10: (0, 11), 6: (0, 7), 27: (0, 28), 19: (0, 20), 3: (0, 4), 28: (0, 29), 4: (0, 5), 29: (0, 30), 7: (0, 8), 9: (0, 10), 30: (0, 31), 13: (0, 14), 14: (0, 15), 1: (0, 47), 21: (0, 162), 20: (0, 21), 31: (0, 32), 32: (0, 33)}, 119: {33: (1, {'@': 98}), 34: (1, {'@': 98}), 3: (1, {'@': 98}), 20: (1, {'@': 98}), 35: (1, {'@': 98}), 31: (1, {'@': 98}), 27: (1, {'@': 98}), 36: (1, {'@': 98}), 28: (1, {'@': 98}), 37: (1, {'@': 98}), 38: (1, {'@': 98}), 39: (1, {'@': 98}), 40: (1, {'@': 98}), 30: (1, {'@': 98}), 41: (1, {'@': 98}), 42: (1, {'@': 98}), 1: (1, {'@': 98}), 6: (1, {'@': 98}), 19: (1, {'@': 98}), 43: (1, {'@': 98}), 44: (1, {'@': 98}), 45: (1, {'@': 98}), 46: (1, {'@': 98}), 47: (1, {'@': 98}), 48: (1, {'@': 98}), 49: (1, {'@': 98}), 50: (1, {'@': 98}), 51: (1, {'@': 98}), 0: (1, {'@': 98}), 52: (1, {'@': 98}), 10: (1, {'@': 98}), 53: (1, {'@': 98}), 23: (1, {'@': 98}), 54: (1, {'@': 98}), 13: (1, {'@': 98})}, 120: {33: (1, {'@': 99}), 34: (1, {'@': 99}), 3: (1, {'@': 99}), 20: (1, {'@': 99}), 35: (1, {'@': 99}), 31: (1, {'@': 99}), 27: (1, {'@': 99}), 36: (1, {'@': 99}), 28: (1, {'@': 99}), 37: (1, {'@': 99}), 38: (1, {'@': 99}), 39: (1, {'@': 99}), 40: (1, {'@': 99}), 30: (1, {'@': 99}), 41: (1, {'@': 99}), 42: (1, {'@': 99}), 1: (1, {'@': 99}), 6: (1, {'@': 99}), 19: (1, {'@': 99}), 43: (1, {'@': 99}), 44: (1, {'@': 99}), 45: (1, {'@': 99}), 46: (1, {'@': 99}), 47: (1, {'@': 99}), 48: (1, {'@': 99}), 49: (1, {'@': 99}), 50: (1, {'@': 99}), 51: (1, {'@': 99}), 0: (1, {'@': 99}), 52: (1, {'@': 99}), 10: (1, {'@': 99}), 53: (1, {'@': 99}), 23: (1, {'@': 99}), 54: (1, {'@': 99}), 13: (1, {'@': 99})}, 121: {33: (1, {'@': 100}), 34: (1, {'@': 100}), 3: (1, {'@': 100}), 20: (1, {'@': 100}), 35: (1, {'@': 100}), 31: (1, {'@': 100}), 27: (1, {'@': 100}), 36: (1, {'@': 100}), 28: (1, {'@': 100}), 37: (1, {'@': 100}), 38: (1, {'@': 100}), 39: (1, {'@': 100}), 40: (1, {'@': 100}), 30: (1, {'@': 100}), 41: (1, {'@': 100}), 42: (1, {'@': 100}), 1: (1, {'@': 100}), 6: (1, {'@': 100}), 19: (1, {'@': 100}), 43: (1, {'@': 100}), 44: (1, {'@': 100}), 45: (1, {'@': 100}), 46: (1, {'@': 100}), 47: (1, {'@': 100}), 48: (1, {'@': 100}), 49: (1, {'@': 100}), 50: (1, {'@': 100}), 51: (1, {'@': 100}), 0: (1, {'@': 100}), 52: (1, {'@': 100}), 10: (1, {'@': 100}), 53: (1, {'@': 100}), 23: (1, {'@': 100}), 54: (1, {'@': 100}), 13: (1, {'@': 100})}, 122: {33: (1, {'@': 101}), 34: (1, {'@': 101}), 3: (1, {'@': 101}), 20: (1, {'@': 101}), 35: (1, {'@': 101}), 31: (1, {'@': 101}), 27: (1, {'@': 101}), 36: (1, {'@': 101}), 28: (1, {'@': 101}), 37: (1, {'@': 101}), 38: (1, {'@': 101}), 39: (1, {'@': 101}), 40: (1, {'@': 101}), 30: (1, {'@': 101}), 41: (1, {'@': 101}), 42: (1, {'@': 101}), 1: (1, {'@': 101}), 6: (1, {'@': 101}), 19: (1, {'@': 101}), 43: (1, {'@': 101}), 44: (1, {'@': 101}), 45: (1, {'@': 101}), 46: (1, {'@': 101}), 47: (1, {'@': 101}), 48: (1, {'@': 101}), 49: (1, {'@': 101}), 50: (1, {'@': 101}), 51: (1, {'@': 101}), 0: (1, {'@': 101}), 52: (1, {'@': 101}), 10: (1, {'@': 101}), 53: (1, {'@': 101}), 23: (1, {'@': 101}), 54: (1, {'@': 101}), 13: (1, {'@': 101})}, 123: {33: (1, {'@': 102}), 34: (1, {'@': 102}), 3: (1, {'@': 102}), 20: (1, {'@': 102}), 35: (1, {'@': 102}), 31: (1, {'@': 102}), 27: (1, {'@': 102}), 36: (1, {'@': 102}), 28: (1, {'@': 102}), 37: (1, {'@': 102}), 38: (1, {'@': 102}), 39: (1, {'@': 102}), 40: (1, {'@': 102}), 30: (1, {'@': 102}), 41: (1, {'@': 102}), 42: (1, {'@': 102}), 1: (1, {'@': 102}), 6: (1, {'@': 102}), 19: (1, {'@': 102}), 43: (1, {'@': 102}), 44: (1, {'@': 102}), 45: (1, {'@': 102}), 46: (1, {'@': 102}), 47: (1, {'@': 102}), 48: (1, {'@': 102}), 49: (1, {'@': 102}), 50: (1, {'@': 102}), 51: (1, {'@': 102}), 0: (1, {'@': 102}), 52: (1, {'@': 102}), 10: (1, {'@': 102}), 53: (1, {'@': 102}), 23: (1, {'@': 102}), 54: (1, {'@': 102}), 13: (1, {'@': 102})}, 124: {61: (1, {'@': 103}), 23: (1, {'@': 103}), 6: (1, {'@': 103})}, 125: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33), 8: (0, 163)}, 126: {49: (0, 164)}, 127: {46: (0, 165)}, 128: {33: (1, {'@': 104}), 34: (1, {'@': 104}), 3: (1, {'@': 104}), 20: (1, {'@': 104}), 35: (1, {'@': 104}), 31: (1, {'@': 104}), 27: (1, {'@': 104}), 36: (1, {'@': 104}), 28: (1, {'@': 104}), 37: (1, {'@': 104}), 38: (1, {'@': 104}), 39: (1, {'@': 104}), 40: (1, {'@': 104}), 30: (1, {'@': 104}), 41: (1, {'@': 104}), 42: (1, {'@': 104}), 1: (1, {'@': 104}), 6: (1, {'@': 104}), 19: (1, {'@': 104}), 43: (1, {'@': 104}), 44: (1, {'@': 104}), 45: (1, {'@': 104}), 46: (1, {'@': 104}), 47: (1, {'@': 104}), 48: (1, {'@': 104}), 49: (1, {'@': 104}), 50: (1, {'@': 104}), 51: (1, {'@': 104}), 0: (1, {'@': 104}), 52: (1, {'@': 104}), 10: (1, {'@': 104}), 53: (1, {'@': 104}), 23: (1, {'@': 104}), 54: (1, {'@': 104}), 13: (1, {'@': 104})}, 129: {33: (1, {'@': 105}), 34: (1, {'@': 105}), 3: (1, {'@': 105}), 20: (1, {'@': 105}), 35: (1, {'@': 105}), 31: (1, {'@': 105}), 27: (1, {'@': 105}), 36: (1, {'@': 105}), 28: (1, {'@': 105}), 37: (1, {'@': 105}), 38: (1, {'@': 105}), 39: (1, {'@': 105}), 40: (1, {'@': 105}), 30: (1, {'@': 105}), 41: (1, {'@': 105}), 42: (1, {'@': 105}), 1: (1, {'@': 105}), 6: (1, {'@': 105}), 19: (1, {'@': 105}), 43: (1, {'@': 105}), 44: (1, {'@': 105}), 45: (1, {'@': 105}), 46: (1, {'@': 105}), 47: (1, {'@': 105}), 48: (1, {'@': 105}), 49: (1, {'@': 105}), 50: (1, {'@': 105}), 51: (1, {'@': 105}), 0: (1, {'@': 105}), 52: (1, {'@': 105}), 10: (1, {'@': 105}), 53: (1, {'@': 105}), 23: (1, {'@': 105}), 54: (1, {'@': 105}), 13: (1, {'@': 105})}, 130: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 8: (0, 166), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 131: {33: (1, {'@': 106}), 34: (1, {'@': 106}), 3: (1, {'@': 106}), 20: (1, {'@': 106}), 35: (1, {'@': 106}), 31: (1, {'@': 106}), 27: (1, {'@': 106}), 36: (1, {'@': 106}), 28: (1, {'@': 106}), 37: (1, {'@': 106}), 38: (1, {'@': 106}), 39: (1, {'@': 106}), 40: (1, {'@': 106}), 30: (1, {'@': 106}), 41: (1, {'@': 106}), 42: (1, {'@': 106}), 1: (1, {'@': 106}), 6: (1, {'@': 106}), 19: (1, {'@': 106}), 43: (1, {'@': 106}), 44: (1, {'@': 106}), 45: (1, {'@': 106}), 46: (1, {'@': 106}), 47: (1, {'@': 106}), 48: (1, {'@': 106}), 49: (1, {'@': 106}), 50: (1, {'@': 106}), 51: (1, {'@': 106}), 0: (1, {'@': 106}), 52: (1, {'@': 106}), 10: (1, {'@': 106}), 53: (1, {'@': 106}), 23: (1, {'@': 106}), 54: (1, {'@': 106}), 13: (1, {'@': 106})}, 132: {64: (0, 167), 52: (0, 135), 48: (0, 168), 43: (0, 169)}, 133: {43: (0, 170), 48: (0, 171), 52: (0, 172)}, 134: {43: (0, 173)}, 135: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 8: (0, 174), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 136: {33: (1, {'@': 107}), 34: (1, {'@': 107}), 3: (1, {'@': 107}), 20: (1, {'@': 107}), 35: (1, {'@': 107}), 31: (1, {'@': 107}), 27: (1, {'@': 107}), 36: (1, {'@': 107}), 28: (1, {'@': 107}), 37: (1, {'@': 107}), 38: (1, {'@': 107}), 39: (1, {'@': 107}), 40: (1, {'@': 107}), 30: (1, {'@': 107}), 41: (1, {'@': 107}), 42: (1, {'@': 107}), 1: (1, {'@': 107}), 6: (1, {'@': 107}), 19: (1, {'@': 107}), 43: (1, {'@': 107}), 44: (1, {'@': 107}), 45: (1, {'@': 107}), 46: (1, {'@': 107}), 47: (1, {'@': 107}), 48: (1, {'@': 107}), 49: (1, {'@': 107}), 50: (1, {'@': 107}), 51: (1, {'@': 107}), 0: (1, {'@': 107}), 52: (1, {'@': 107}), 10: (1, {'@': 107}), 53: (1, {'@': 107}), 23: (1, {'@': 107}), 54: (1, {'@': 107}), 13: (1, {'@': 107})}, 137: {33: (1, {'@': 108}), 34: (1, {'@': 108}), 3: (1, {'@': 108}), 20: (1, {'@': 108}), 35: (1, {'@': 108}), 31: (1, {'@': 108}), 27: (1, {'@': 108}), 36: (1, {'@': 108}), 28: (1, {'@': 108}), 37: (1, {'@': 108}), 38: (1, {'@': 108}), 39: (1, {'@': 108}), 40: (1, {'@': 108}), 30: (1, {'@': 108}), 41: (1, {'@': 108}), 42: (1, {'@': 108}), 1: (1, {'@': 108}), 6: (1, {'@': 108}), 19: (1, {'@': 108}), 43: (1, {'@': 108}), 44: (1, {'@': 108}), 45: (1, {'@': 108}), 46: (1, {'@': 108}), 47: (1, {'@': 108}), 48: (1, {'@': 108}), 49: (1, {'@': 108}), 50: (1, {'@': 108}), 51: (1, {'@': 108}), 0: (1, {'@': 108}), 52: (1, {'@': 108}), 10: (1, {'@': 108}), 53: (1, {'@': 108}), 23: (1, {'@': 108}), 54: (1, {'@': 108}), 13: (1, {'@': 108})}, 138: {33: (1, {'@': 109}), 34: (1, {'@': 109}), 3: (1, {'@': 109}), 20: (1, {'@': 109}), 35: (1, {'@': 109}), 31: (1, {'@': 109}), 27: (1, {'@': 109}), 36: (1, {'@': 109}), 28: (1, {'@': 109}), 37: (1, {'@': 109}), 38: (1, {'@': 109}), 39: (1, {'@': 109}), 40: (1, {'@': 109}), 30: (1, {'@': 109}), 41: (1, {'@': 109}), 42: (1, {'@': 109}), 1: (1, {'@': 109}), 6: (1, {'@': 109}), 19: (1, {'@': 109}), 43: (1, {'@': 109}), 44: (1, {'@': 109}), 45: (1, {'@': 109}), 46: (1, {'@': 109}), 47: (1, {'@': 109}), 48: (1, {'@': 109}), 49: (1, {'@': 109}), 50: (1, {'@': 109}), 51: (1, {'@': 109}), 0: (1, {'@': 109}), 52: (1, {'@': 109}), 10: (1, {'@': 109}), 53: (1, {'@': 109}), 23: (1, {'@': 109}), 54: (1, {'@': 109}), 13: (1, {'@': 109})}, 139: {33: (1, {'@': 110}), 34: (1, {'@': 110}), 3: (1, {'@': 110}), 20: (1, {'@': 110}), 35: (1, {'@': 110}), 31: (1, {'@': 110}), 27: (1, {'@': 110}), 36: (1, {'@': 110}), 28: (1, {'@': 110}), 37: (1, {'@': 110}), 38: (1, {'@': 110}), 39: (1, {'@': 110}), 40: (1, {'@': 110}), 30: (1, {'@': 110}), 41: (1, {'@': 110}), 42: (1, {'@': 110}), 1: (1, {'@': 110}), 6: (1, {'@': 110}), 19: (1, {'@': 110}), 43: (1, {'@': 110}), 44: (1, {'@': 110}), 45: (1, {'@': 110}), 46: (1, {'@': 110}), 47: (1, {'@': 110}), 48: (1, {'@': 110}), 49: (1, {'@': 110}), 50: (1, {'@': 110}), 51: (1, {'@': 110}), 0: (1, {'@': 110}), 52: (1, {'@': 110}), 10: (1, {'@': 110}), 53: (1, {'@': 110}), 23: (1, {'@': 110}), 54: (1, {'@': 110}), 13: (1, {'@': 110})}, 140: {54: (0, 175)}, 141: {33: (1, {'@': 111}), 34: (1, {'@': 111}), 3: (1, {'@': 111}), 20: (1, {'@': 111}), 35: (1, {'@': 111}), 31: (1, {'@': 111}), 27: (1, {'@': 111}), 36: (1, {'@': 111}), 28: (1, {'@': 111}), 37: (1, {'@': 111}), 38: (1, {'@': 111}), 39: (1, {'@': 111}), 40: (1, {'@': 111}), 30: (1, {'@': 111}), 41: (1, {'@': 111}), 42: (1, {'@': 111}), 1: (1, {'@': 111}), 6: (1, {'@': 111}), 19: (1, {'@': 111}), 43: (1, {'@': 111}), 44: (1, {'@': 111}), 45: (1, {'@': 111}), 46: (1, {'@': 111}), 47: (1, {'@': 111}), 48: (1, {'@': 111}), 49: (1, {'@': 111}), 50: (1, {'@': 111}), 51: (1, {'@': 111}), 0: (1, {'@': 111}), 52: (1, {'@': 111}), 10: (1, {'@': 111}), 53: (1, {'@': 111}), 23: (1, {'@': 111}), 54: (1, {'@': 111}), 13: (1, {'@': 111})}, 142: {33: (1, {'@': 112}), 34: (1, {'@': 112}), 3: (1, {'@': 112}), 20: (1, {'@': 112}), 35: (1, {'@': 112}), 31: (1, {'@': 112}), 27: (1, {'@': 112}), 36: (1, {'@': 112}), 28: (1, {'@': 112}), 37: (1, {'@': 112}), 38: (1, {'@': 112}), 39: (1, {'@': 112}), 40: (1, {'@': 112}), 30: (1, {'@': 112}), 41: (1, {'@': 112}), 42: (1, {'@': 112}), 1: (1, {'@': 112}), 6: (1, {'@': 112}), 19: (1, {'@': 112}), 43: (1, {'@': 112}), 44: (1, {'@': 112}), 45: (1, {'@': 112}), 46: (1, {'@': 112}), 47: (1, {'@': 112}), 48: (1, {'@': 112}), 49: (1, {'@': 112}), 50: (1, {'@': 112}), 51: (1, {'@': 112}), 0: (1, {'@': 112}), 52: (1, {'@': 112}), 10: (1, {'@': 112}), 53: (1, {'@': 112}), 23: (1, {'@': 112}), 54: (1, {'@': 112}), 13: (1, {'@': 112})}, 143: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 16: (0, 158), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 49: (0, 176), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 144: {33: (1, {'@': 113}), 34: (1, {'@': 113}), 3: (1, {'@': 113}), 20: (1, {'@': 113}), 35: (1, {'@': 113}), 31: (1, {'@': 113}), 27: (1, {'@': 113}), 36: (1, {'@': 113}), 28: (1, {'@': 113}), 37: (1, {'@': 113}), 38: (1, {'@': 113}), 39: (1, {'@': 113}), 40: (1, {'@': 113}), 30: (1, {'@': 113}), 41: (1, {'@': 113}), 42: (1, {'@': 113}), 1: (1, {'@': 113}), 6: (1, {'@': 113}), 19: (1, {'@': 113}), 43: (1, {'@': 113}), 44: (1, {'@': 113}), 45: (1, {'@': 113}), 46: (1, {'@': 113}), 47: (1, {'@': 113}), 48: (1, {'@': 113}), 49: (1, {'@': 113}), 50: (1, {'@': 113}), 51: (1, {'@': 113}), 0: (1, {'@': 113}), 52: (1, {'@': 113}), 10: (1, {'@': 113}), 53: (1, {'@': 113}), 23: (1, {'@': 113}), 54: (1, {'@': 113}), 13: (1, {'@': 113})}, 145: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 16: (0, 159), 48: (0, 177), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 49: (0, 178), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 146: {40: (1, {'@': 97}), 49: (0, 179), 44: (1, {'@': 97}), 48: (1, {'@': 97})}, 147: {33: (1, {'@': 114}), 34: (1, {'@': 114}), 3: (1, {'@': 114}), 20: (1, {'@': 114}), 35: (1, {'@': 114}), 31: (1, {'@': 114}), 27: (1, {'@': 114}), 36: (1, {'@': 114}), 28: (1, {'@': 114}), 37: (1, {'@': 114}), 38: (1, {'@': 114}), 39: (1, {'@': 114}), 40: (1, {'@': 114}), 30: (1, {'@': 114}), 41: (1, {'@': 114}), 42: (1, {'@': 114}), 1: (1, {'@': 114}), 6: (1, {'@': 114}), 19: (1, {'@': 114}), 43: (1, {'@': 114}), 44: (1, {'@': 114}), 45: (1, {'@': 114}), 46: (1, {'@': 114}), 47: (1, {'@': 114}), 48: (1, {'@': 114}), 49: (1, {'@': 114}), 50: (1, {'@': 114}), 51: (1, {'@': 114}), 0: (1, {'@': 114}), 52: (1, {'@': 114}), 10: (1, {'@': 114}), 53: (1, {'@': 114}), 23: (1, {'@': 114}), 54: (1, {'@': 114}), 13: (1, {'@': 114})}, 148: {33: (1, {'@': 115}), 34: (1, {'@': 115}), 3: (1, {'@': 115}), 20: (1, {'@': 115}), 35: (1, {'@': 115}), 31: (1, {'@': 115}), 27: (1, {'@': 115}), 36: (1, {'@': 115}), 28: (1, {'@': 115}), 37: (1, {'@': 115}), 38: (1, {'@': 115}), 39: (1, {'@': 115}), 40: (1, {'@': 115}), 30: (1, {'@': 115}), 41: (1, {'@': 115}), 42: (1, {'@': 115}), 1: (1, {'@': 115}), 6: (1, {'@': 115}), 19: (1, {'@': 115}), 43: (1, {'@': 115}), 44: (1, {'@': 115}), 45: (1, {'@': 115}), 46: (1, {'@': 115}), 47: (1, {'@': 115}), 48: (1, {'@': 115}), 49: (1, {'@': 115}), 50: (1, {'@': 115}), 51: (1, {'@': 115}), 0: (1, {'@': 115}), 52: (1, {'@': 115}), 10: (1, {'@': 115}), 53: (1, {'@': 115}), 23: (1, {'@': 115}), 54: (1, {'@': 115}), 13: (1, {'@': 115})}, 149: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 48: (0, 180), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 49: (0, 181), 16: (0, 114), 31: (0, 32), 32: (0, 33)}, 150: {49: (0, 182), 40: (0, 183), 48: (0, 184)}, 151: {40: (1, {'@': 72}), 49: (0, 185), 44: (1, {'@': 72}), 48: (1, {'@': 72})}, 152: {33: (1, {'@': 116}), 34: (1, {'@': 116}), 3: (1, {'@': 116}), 20: (1, {'@': 116}), 35: (1, {'@': 116}), 31: (1, {'@': 116}), 27: (1, {'@': 116}), 36: (1, {'@': 116}), 28: (1, {'@': 116}), 37: (1, {'@': 116}), 38: (1, {'@': 116}), 39: (1, {'@': 116}), 40: (1, {'@': 116}), 30: (1, {'@': 116}), 41: (1, {'@': 116}), 42: (1, {'@': 116}), 1: (1, {'@': 116}), 6: (1, {'@': 116}), 19: (1, {'@': 116}), 43: (1, {'@': 116}), 44: (1, {'@': 116}), 45: (1, {'@': 116}), 46: (1, {'@': 116}), 47: (1, {'@': 116}), 48: (1, {'@': 116}), 49: (1, {'@': 116}), 50: (1, {'@': 116}), 51: (1, {'@': 116}), 0: (1, {'@': 116}), 52: (1, {'@': 116}), 10: (1, {'@': 116}), 53: (1, {'@': 116}), 23: (1, {'@': 116}), 54: (1, {'@': 116}), 13: (1, {'@': 116})}, 153: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 8: (0, 186), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 154: {1: (0, 187)}, 155: {10: (1, {'@': 117}), 52: (1, {'@': 117})}, 156: {33: (1, {'@': 118}), 34: (1, {'@': 118}), 3: (1, {'@': 118}), 20: (1, {'@': 118}), 35: (1, {'@': 118}), 31: (1, {'@': 118}), 27: (1, {'@': 118}), 36: (1, {'@': 118}), 28: (1, {'@': 118}), 37: (1, {'@': 118}), 38: (1, {'@': 118}), 39: (1, {'@': 118}), 40: (1, {'@': 118}), 30: (1, {'@': 118}), 41: (1, {'@': 118}), 42: (1, {'@': 118}), 1: (1, {'@': 118}), 6: (1, {'@': 118}), 19: (1, {'@': 118}), 43: (1, {'@': 118}), 44: (1, {'@': 118}), 45: (1, {'@': 118}), 46: (1, {'@': 118}), 47: (1, {'@': 118}), 48: (1, {'@': 118}), 49: (1, {'@': 118}), 50: (1, {'@': 118}), 51: (1, {'@': 118}), 0: (1, {'@': 118}), 52: (1, {'@': 118}), 10: (1, {'@': 118}), 53: (1, {'@': 118}), 23: (1, {'@': 118}), 54: (1, {'@': 118}), 13: (1, {'@': 118})}, 157: {33: (1, {'@': 119}), 34: (1, {'@': 119}), 3: (1, {'@': 119}), 20: (1, {'@': 119}), 35: (1, {'@': 119}), 31: (1, {'@': 119}), 27: (1, {'@': 119}), 36: (1, {'@': 119}), 28: (1, {'@': 119}), 37: (1, {'@': 119}), 38: (1, {'@': 119}), 39: (1, {'@': 119}), 40: (1, {'@': 119}), 30: (1, {'@': 119}), 41: (1, {'@': 119}), 42: (1, {'@': 119}), 1: (1, {'@': 119}), 6: (1, {'@': 119}), 19: (1, {'@': 119}), 43: (1, {'@': 119}), 44: (1, {'@': 119}), 45: (1, {'@': 119}), 46: (1, {'@': 119}), 47: (1, {'@': 119}), 48: (1, {'@': 119}), 49: (1, {'@': 119}), 50: (1, {'@': 119}), 51: (1, {'@': 119}), 0: (1, {'@': 119}), 52: (1, {'@': 119}), 10: (1, {'@': 119}), 53: (1, {'@': 119}), 23: (1, {'@': 119}), 54: (1, {'@': 119}), 13: (1, {'@': 119})}, 158: {40: (1, {'@': 120}), 49: (1, {'@': 120}), 44: (1, {'@': 120}), 48: (1, {'@': 120})}, 159: {40: (1, {'@': 121}), 49: (1, {'@': 121}), 44: (1, {'@': 121}), 48: (1, {'@': 121})}, 160: {16: (0, 188), 0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 161: {33: (1, {'@': 122}), 34: (1, {'@': 122}), 3: (1, {'@': 122}), 20: (1, {'@': 122}), 35: (1, {'@': 122}), 31: (1, {'@': 122}), 27: (1, {'@': 122}), 36: (1, {'@': 122}), 28: (1, {'@': 122}), 37: (1, {'@': 122}), 38: (1, {'@': 122}), 39: (1, {'@': 122}), 40: (1, {'@': 122}), 30: (1, {'@': 122}), 41: (1, {'@': 122}), 42: (1, {'@': 122}), 1: (1, {'@': 122}), 6: (1, {'@': 122}), 19: (1, {'@': 122}), 43: (1, {'@': 122}), 44: (1, {'@': 122}), 45: (1, {'@': 122}), 46: (1, {'@': 122}), 47: (1, {'@': 122}), 48: (1, {'@': 122}), 49: (1, {'@': 122}), 50: (1, {'@': 122}), 51: (1, {'@': 122}), 0: (1, {'@': 122}), 52: (1, {'@': 122}), 10: (1, {'@': 122}), 53: (1, {'@': 122}), 23: (1, {'@': 122}), 54: (1, {'@': 122}), 13: (1, {'@': 122})}, 162: {33: (1, {'@': 123}), 34: (1, {'@': 123}), 3: (1, {'@': 123}), 20: (1, {'@': 123}), 35: (1, {'@': 123}), 31: (1, {'@': 123}), 27: (1, {'@': 123}), 36: (1, {'@': 123}), 28: (1, {'@': 123}), 37: (1, {'@': 123}), 38: (1, {'@': 123}), 39: (1, {'@': 123}), 40: (1, {'@': 123}), 30: (1, {'@': 123}), 41: (1, {'@': 123}), 42: (1, {'@': 123}), 1: (1, {'@': 123}), 6: (1, {'@': 123}), 19: (1, {'@': 123}), 43: (1, {'@': 123}), 44: (1, {'@': 123}), 45: (1, {'@': 123}), 46: (1, {'@': 123}), 47: (1, {'@': 123}), 48: (1, {'@': 123}), 49: (1, {'@': 123}), 50: (1, {'@': 123}), 51: (1, {'@': 123}), 0: (1, {'@': 123}), 52: (1, {'@': 123}), 10: (1, {'@': 123}), 53: (1, {'@': 123}), 23: (1, {'@': 123}), 54: (1, {'@': 123}), 13: (1, {'@': 123})}, 163: {49: (0, 189)}, 164: {61: (1, {'@': 124}), 23: (1, {'@': 124}), 6: (1, {'@': 124})}, 165: {0: (0, 1), 1: (0, 2), 2: (0, 3), 16: (0, 190), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 166: {33: (1, {'@': 125}), 34: (1, {'@': 125}), 3: (1, {'@': 125}), 20: (1, {'@': 125}), 35: (1, {'@': 125}), 31: (1, {'@': 125}), 27: (1, {'@': 125}), 36: (1, {'@': 125}), 28: (1, {'@': 125}), 37: (1, {'@': 125}), 38: (1, {'@': 125}), 39: (1, {'@': 125}), 40: (1, {'@': 125}), 30: (1, {'@': 125}), 41: (1, {'@': 125}), 42: (1, {'@': 125}), 1: (1, {'@': 125}), 6: (1, {'@': 125}), 19: (1, {'@': 125}), 43: (1, {'@': 125}), 44: (1, {'@': 125}), 45: (1, {'@': 125}), 46: (1, {'@': 125}), 47: (1, {'@': 125}), 49: (1, {'@': 125}), 48: (1, {'@': 125}), 50: (1, {'@': 125}), 51: (1, {'@': 125}), 0: (1, {'@': 125}), 52: (1, {'@': 125}), 10: (1, {'@': 125}), 53: (1, {'@': 125}), 23: (1, {'@': 125}), 54: (1, {'@': 125}), 13: (1, {'@': 125})}, 167: {48: (0, 191), 43: (0, 192), 52: (0, 172)}, 168: {43: (0, 193)}, 169: {33: (1, {'@': 126}), 34: (1, {'@': 126}), 3: (1, {'@': 126}), 20: (1, {'@': 126}), 35: (1, {'@': 126}), 31: (1, {'@': 126}), 27: (1, {'@': 126}), 36: (1, {'@': 126}), 28: (1, {'@': 126}), 37: (1, {'@': 126}), 38: (1, {'@': 126}), 39: (1, {'@': 126}), 40: (1, {'@': 126}), 30: (1, {'@': 126}), 41: (1, {'@': 126}), 42: (1, {'@': 126}), 1: (1, {'@': 126}), 6: (1, {'@': 126}), 19: (1, {'@': 126}), 43: (1, {'@': 126}), 44: (1, {'@': 126}), 45: (1, {'@': 126}), 46: (1, {'@': 126}), 47: (1, {'@': 126}), 48: (1, {'@': 126}), 49: (1, {'@': 126}), 50: (1, {'@': 126}), 51: (1, {'@': 126}), 0: (1, {'@': 126}), 52: (1, {'@': 126}), 10: (1, {'@': 126}), 53: (1, {'@': 126}), 23: (1, {'@': 126}), 54: (1, {'@': 126}), 13: (1, {'@': 126})}, 170: {33: (1, {'@': 127}), 34: (1, {'@': 127}), 3: (1, {'@': 127}), 20: (1, {'@': 127}), 35: (1, {'@': 127}), 31: (1, {'@': 127}), 27: (1, {'@': 127}), 36: (1, {'@': 127}), 28: (1, {'@': 127}), 37: (1, {'@': 127}), 38: (1, {'@': 127}), 39: (1, {'@': 127}), 40: (1, {'@': 127}), 30: (1, {'@': 127}), 41: (1, {'@': 127}), 42: (1, {'@': 127}), 1: (1, {'@': 127}), 6: (1, {'@': 127}), 19: (1, {'@': 127}), 43: (1, {'@': 127}), 44: (1, {'@': 127}), 45: (1, {'@': 127}), 46: (1, {'@': 127}), 47: (1, {'@': 127}), 48: (1, {'@': 127}), 49: (1, {'@': 127}), 50: (1, {'@': 127}), 51: (1, {'@': 127}), 0: (1, {'@': 127}), 52: (1, {'@': 127}), 10: (1, {'@': 127}), 53: (1, {'@': 127}), 23: (1, {'@': 127}), 54: (1, {'@': 127}), 13: (1, {'@': 127})}, 171: {43: (0, 194)}, 172: {0: (0, 1), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 19: (0, 20), 20: (0, 21), 21: (0, 22), 8: (0, 195), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 1: (0, 47), 31: (0, 32), 32: (0, 33)}, 173: {33: (1, {'@': 128}), 34: (1, {'@': 128}), 3: (1, {'@': 128}), 20: (1, {'@': 128}), 35: (1, {'@': 128}), 31: (1, {'@': 128}), 27: (1, {'@': 128}), 36: (1, {'@': 128}), 28: (1, {'@': 128}), 37: (1, {'@': 128}), 38: (1, {'@': 128}), 39: (1, {'@': 128}), 40: (1, {'@': 128}), 30: (1, {'@': 128}), 41: (1, {'@': 128}), 42: (1, {'@': 128}), 1: (1, {'@': 128}), 6: (1, {'@': 128}), 19: (1, {'@': 128}), 43: (1, {'@': 128}), 44: (1, {'@': 128}), 45: (1, {'@': 128}), 46: (1, {'@': 128}), 47: (1, {'@': 128}), 48: (1, {'@': 128}), 49: (1, {'@': 128}), 50: (1, {'@': 128}), 51: (1, {'@': 128}), 0: (1, {'@': 128}), 52: (1, {'@': 128}), 10: (1, {'@': 128}), 53: (1, {'@': 128}), 23: (1, {'@': 128}), 54: (1, {'@': 128}), 13: (1, {'@': 128})}, 174: {43: (1, {'@': 129}), 52: (1, {'@': 129}), 48: (1, {'@': 129})}, 175: {33: (1, {'@': 130}), 34: (1, {'@': 130}), 3: (1, {'@': 130}), 20: (1, {'@': 130}), 35: (1, {'@': 130}), 31: (1, {'@': 130}), 27: (1, {'@': 130}), 36: (1, {'@': 130}), 28: (1, {'@': 130}), 37: (1, {'@': 130}), 38: (1, {'@': 130}), 39: (1, {'@': 130}), 40: (1, {'@': 130}), 30: (1, {'@': 130}), 41: (1, {'@': 130}), 42: (1, {'@': 130}), 1: (1, {'@': 130}), 6: (1, {'@': 130}), 19: (1, {'@': 130}), 43: (1, {'@': 130}), 44: (1, {'@': 130}), 45: (1, {'@': 130}), 46: (1, {'@': 130}), 47: (1, {'@': 130}), 48: (1, {'@': 130}), 49: (1, {'@': 130}), 50: (1, {'@': 130}), 51: (1, {'@': 130}), 0: (1, {'@': 130}), 52: (1, {'@': 130}), 10: (1, {'@': 130}), 53: (1, {'@': 130}), 23: (1, {'@': 130}), 54: (1, {'@': 130}), 13: (1, {'@': 130})}, 176: {33: (1, {'@': 131}), 34: (1, {'@': 131}), 3: (1, {'@': 131}), 20: (1, {'@': 131}), 35: (1, {'@': 131}), 31: (1, {'@': 131}), 27: (1, {'@': 131}), 36: (1, {'@': 131}), 28: (1, {'@': 131}), 37: (1, {'@': 131}), 38: (1, {'@': 131}), 39: (1, {'@': 131}), 40: (1, {'@': 131}), 30: (1, {'@': 131}), 41: (1, {'@': 131}), 42: (1, {'@': 131}), 1: (1, {'@': 131}), 6: (1, {'@': 131}), 19: (1, {'@': 131}), 43: (1, {'@': 131}), 44: (1, {'@': 131}), 45: (1, {'@': 131}), 46: (1, {'@': 131}), 47: (1, {'@': 131}), 48: (1, {'@': 131}), 49: (1, {'@': 131}), 50: (1, {'@': 131}), 51: (1, {'@': 131}), 0: (1, {'@': 131}), 52: (1, {'@': 131}), 10: (1, {'@': 131}), 53: (1, {'@': 131}), 23: (1, {'@': 131}), 54: (1, {'@': 131}), 13: (1, {'@': 131})}, 177: {16: (0, 188), 0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 49: (0, 196), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 178: {33: (1, {'@': 132}), 34: (1, {'@': 132}), 3: (1, {'@': 132}), 20: (1, {'@': 132}), 35: (1, {'@': 132}), 31: (1, {'@': 132}), 27: (1, {'@': 132}), 36: (1, {'@': 132}), 28: (1, {'@': 132}), 37: (1, {'@': 132}), 38: (1, {'@': 132}), 39: (1, {'@': 132}), 40: (1, {'@': 132}), 30: (1, {'@': 132}), 41: (1, {'@': 132}), 42: (1, {'@': 132}), 1: (1, {'@': 132}), 6: (1, {'@': 132}), 19: (1, {'@': 132}), 43: (1, {'@': 132}), 44: (1, {'@': 132}), 45: (1, {'@': 132}), 46: (1, {'@': 132}), 47: (1, {'@': 132}), 48: (1, {'@': 132}), 49: (1, {'@': 132}), 50: (1, {'@': 132}), 51: (1, {'@': 132}), 0: (1, {'@': 132}), 52: (1, {'@': 132}), 10: (1, {'@': 132}), 53: (1, {'@': 132}), 23: (1, {'@': 132}), 54: (1, {'@': 132}), 13: (1, {'@': 132})}, 179: {33: (1, {'@': 133}), 34: (1, {'@': 133}), 3: (1, {'@': 133}), 20: (1, {'@': 133}), 35: (1, {'@': 133}), 31: (1, {'@': 133}), 27: (1, {'@': 133}), 36: (1, {'@': 133}), 28: (1, {'@': 133}), 37: (1, {'@': 133}), 38: (1, {'@': 133}), 39: (1, {'@': 133}), 40: (1, {'@': 133}), 30: (1, {'@': 133}), 41: (1, {'@': 133}), 42: (1, {'@': 133}), 1: (1, {'@': 133}), 6: (1, {'@': 133}), 19: (1, {'@': 133}), 43: (1, {'@': 133}), 44: (1, {'@': 133}), 45: (1, {'@': 133}), 46: (1, {'@': 133}), 47: (1, {'@': 133}), 48: (1, {'@': 133}), 49: (1, {'@': 133}), 50: (1, {'@': 133}), 51: (1, {'@': 133}), 0: (1, {'@': 133}), 52: (1, {'@': 133}), 10: (1, {'@': 133}), 53: (1, {'@': 133}), 23: (1, {'@': 133}), 54: (1, {'@': 133}), 13: (1, {'@': 133})}, 180: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 16: (0, 158), 11: (0, 12), 49: (0, 197), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 181: {33: (1, {'@': 134}), 34: (1, {'@': 134}), 3: (1, {'@': 134}), 20: (1, {'@': 134}), 35: (1, {'@': 134}), 31: (1, {'@': 134}), 27: (1, {'@': 134}), 36: (1, {'@': 134}), 28: (1, {'@': 134}), 37: (1, {'@': 134}), 38: (1, {'@': 134}), 39: (1, {'@': 134}), 40: (1, {'@': 134}), 30: (1, {'@': 134}), 41: (1, {'@': 134}), 42: (1, {'@': 134}), 1: (1, {'@': 134}), 6: (1, {'@': 134}), 19: (1, {'@': 134}), 43: (1, {'@': 134}), 44: (1, {'@': 134}), 45: (1, {'@': 134}), 46: (1, {'@': 134}), 47: (1, {'@': 134}), 48: (1, {'@': 134}), 49: (1, {'@': 134}), 50: (1, {'@': 134}), 51: (1, {'@': 134}), 0: (1, {'@': 134}), 52: (1, {'@': 134}), 10: (1, {'@': 134}), 53: (1, {'@': 134}), 23: (1, {'@': 134}), 54: (1, {'@': 134}), 13: (1, {'@': 134})}, 182: {33: (1, {'@': 135}), 34: (1, {'@': 135}), 3: (1, {'@': 135}), 20: (1, {'@': 135}), 35: (1, {'@': 135}), 31: (1, {'@': 135}), 27: (1, {'@': 135}), 36: (1, {'@': 135}), 28: (1, {'@': 135}), 37: (1, {'@': 135}), 38: (1, {'@': 135}), 39: (1, {'@': 135}), 40: (1, {'@': 135}), 30: (1, {'@': 135}), 41: (1, {'@': 135}), 42: (1, {'@': 135}), 1: (1, {'@': 135}), 6: (1, {'@': 135}), 19: (1, {'@': 135}), 43: (1, {'@': 135}), 44: (1, {'@': 135}), 45: (1, {'@': 135}), 46: (1, {'@': 135}), 47: (1, {'@': 135}), 48: (1, {'@': 135}), 49: (1, {'@': 135}), 50: (1, {'@': 135}), 51: (1, {'@': 135}), 0: (1, {'@': 135}), 52: (1, {'@': 135}), 10: (1, {'@': 135}), 53: (1, {'@': 135}), 23: (1, {'@': 135}), 54: (1, {'@': 135}), 13: (1, {'@': 135})}, 183: {0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 16: (0, 159), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 48: (0, 198), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 49: (0, 199), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 31: (0, 32), 32: (0, 33)}, 184: {40: (1, {'@': 97}), 49: (0, 200), 44: (1, {'@': 97}), 48: (1, {'@': 97})}, 185: {33: (1, {'@': 136}), 34: (1, {'@': 136}), 3: (1, {'@': 136}), 20: (1, {'@': 136}), 35: (1, {'@': 136}), 31: (1, {'@': 136}), 27: (1, {'@': 136}), 36: (1, {'@': 136}), 28: (1, {'@': 136}), 37: (1, {'@': 136}), 38: (1, {'@': 136}), 39: (1, {'@': 136}), 40: (1, {'@': 136}), 30: (1, {'@': 136}), 41: (1, {'@': 136}), 42: (1, {'@': 136}), 1: (1, {'@': 136}), 6: (1, {'@': 136}), 19: (1, {'@': 136}), 43: (1, {'@': 136}), 44: (1, {'@': 136}), 45: (1, {'@': 136}), 46: (1, {'@': 136}), 47: (1, {'@': 136}), 48: (1, {'@': 136}), 49: (1, {'@': 136}), 50: (1, {'@': 136}), 51: (1, {'@': 136}), 0: (1, {'@': 136}), 52: (1, {'@': 136}), 10: (1, {'@': 136}), 53: (1, {'@': 136}), 23: (1, {'@': 136}), 54: (1, {'@': 136}), 13: (1, {'@': 136})}, 186: {33: (1, {'@': 137}), 34: (1, {'@': 137}), 3: (1, {'@': 137}), 20: (1, {'@': 137}), 35: (1, {'@': 137}), 31: (1, {'@': 137}), 27: (1, {'@': 137}), 36: (1, {'@': 137}), 28: (1, {'@': 137}), 37: (1, {'@': 137}), 38: (1, {'@': 137}), 39: (1, {'@': 137}), 40: (1, {'@': 137}), 30: (1, {'@': 137}), 41: (1, {'@': 137}), 42: (1, {'@': 137}), 1: (1, {'@': 137}), 6: (1, {'@': 137}), 19: (1, {'@': 137}), 43: (1, {'@': 137}), 44: (1, {'@': 137}), 45: (1, {'@': 137}), 46: (1, {'@': 137}), 47: (1, {'@': 137}), 48: (1, {'@': 137}), 49: (1, {'@': 137}), 50: (1, {'@': 137}), 51: (1, {'@': 137}), 0: (1, {'@': 137}), 52: (1, {'@': 137}), 10: (1, {'@': 137}), 53: (1, {'@': 137}), 23: (1, {'@': 137}), 54: (1, {'@': 137}), 13: (1, {'@': 137})}, 187: {10: (1, {'@': 138}), 52: (1, {'@': 138})}, 188: {40: (1, {'@': 139}), 49: (1, {'@': 139}), 44: (1, {'@': 139}), 48: (1, {'@': 139})}, 189: {61: (1, {'@': 140}), 23: (1, {'@': 140}), 6: (1, {'@': 140})}, 190: {33: (1, {'@': 141}), 34: (1, {'@': 141}), 3: (1, {'@': 141}), 20: (1, {'@': 141}), 35: (1, {'@': 141}), 31: (1, {'@': 141}), 27: (1, {'@': 141}), 36: (1, {'@': 141}), 28: (1, {'@': 141}), 37: (1, {'@': 141}), 38: (1, {'@': 141}), 39: (1, {'@': 141}), 40: (1, {'@': 141}), 30: (1, {'@': 141}), 41: (1, {'@': 141}), 42: (1, {'@': 141}), 1: (1, {'@': 141}), 6: (1, {'@': 141}), 19: (1, {'@': 141}), 43: (1, {'@': 141}), 44: (1, {'@': 141}), 45: (1, {'@': 141}), 46: (1, {'@': 141}), 47: (1, {'@': 141}), 48: (1, {'@': 141}), 49: (1, {'@': 141}), 50: (1, {'@': 141}), 51: (1, {'@': 141}), 0: (1, {'@': 141}), 52: (1, {'@': 141}), 10: (1, {'@': 141}), 53: (1, {'@': 141}), 23: (1, {'@': 141}), 54: (1, {'@': 141}), 13: (1, {'@': 141})}, 191: {43: (0, 201)}, 192: {33: (1, {'@': 142}), 34: (1, {'@': 142}), 3: (1, {'@': 142}), 20: (1, {'@': 142}), 35: (1, {'@': 142}), 31: (1, {'@': 142}), 27: (1, {'@': 142}), 36: (1, {'@': 142}), 28: (1, {'@': 142}), 37: (1, {'@': 142}), 38: (1, {'@': 142}), 39: (1, {'@': 142}), 40: (1, {'@': 142}), 30: (1, {'@': 142}), 41: (1, {'@': 142}), 42: (1, {'@': 142}), 1: (1, {'@': 142}), 6: (1, {'@': 142}), 19: (1, {'@': 142}), 43: (1, {'@': 142}), 44: (1, {'@': 142}), 45: (1, {'@': 142}), 46: (1, {'@': 142}), 47: (1, {'@': 142}), 48: (1, {'@': 142}), 49: (1, {'@': 142}), 50: (1, {'@': 142}), 51: (1, {'@': 142}), 0: (1, {'@': 142}), 52: (1, {'@': 142}), 10: (1, {'@': 142}), 53: (1, {'@': 142}), 23: (1, {'@': 142}), 54: (1, {'@': 142}), 13: (1, {'@': 142})}, 193: {33: (1, {'@': 143}), 34: (1, {'@': 143}), 3: (1, {'@': 143}), 20: (1, {'@': 143}), 35: (1, {'@': 143}), 31: (1, {'@': 143}), 27: (1, {'@': 143}), 36: (1, {'@': 143}), 28: (1, {'@': 143}), 37: (1, {'@': 143}), 38: (1, {'@': 143}), 39: (1, {'@': 143}), 40: (1, {'@': 143}), 30: (1, {'@': 143}), 41: (1, {'@': 143}), 42: (1, {'@': 143}), 1: (1, {'@': 143}), 6: (1, {'@': 143}), 19: (1, {'@': 143}), 43: (1, {'@': 143}), 44: (1, {'@': 143}), 45: (1, {'@': 143}), 46: (1, {'@': 143}), 47: (1, {'@': 143}), 48: (1, {'@': 143}), 49: (1, {'@': 143}), 50: (1, {'@': 143}), 51: (1, {'@': 143}), 0: (1, {'@': 143}), 52: (1, {'@': 143}), 10: (1, {'@': 143}), 53: (1, {'@': 143}), 23: (1, {'@': 143}), 54: (1, {'@': 143}), 13: (1, {'@': 143})}, 194: {33: (1, {'@': 144}), 34: (1, {'@': 144}), 3: (1, {'@': 144}), 20: (1, {'@': 144}), 35: (1, {'@': 144}), 31: (1, {'@': 144}), 27: (1, {'@': 144}), 36: (1, {'@': 144}), 28: (1, {'@': 144}), 37: (1, {'@': 144}), 38: (1, {'@': 144}), 39: (1, {'@': 144}), 40: (1, {'@': 144}), 30: (1, {'@': 144}), 41: (1, {'@': 144}), 42: (1, {'@': 144}), 1: (1, {'@': 144}), 6: (1, {'@': 144}), 19: (1, {'@': 144}), 43: (1, {'@': 144}), 44: (1, {'@': 144}), 45: (1, {'@': 144}), 46: (1, {'@': 144}), 47: (1, {'@': 144}), 48: (1, {'@': 144}), 49: (1, {'@': 144}), 50: (1, {'@': 144}), 51: (1, {'@': 144}), 0: (1, {'@': 144}), 52: (1, {'@': 144}), 10: (1, {'@': 144}), 53: (1, {'@': 144}), 23: (1, {'@': 144}), 54: (1, {'@': 144}), 13: (1, {'@': 144})}, 195: {43: (1, {'@': 145}), 52: (1, {'@': 145}), 48: (1, {'@': 145})}, 196: {33: (1, {'@': 146}), 34: (1, {'@': 146}), 3: (1, {'@': 146}), 20: (1, {'@': 146}), 35: (1, {'@': 146}), 31: (1, {'@': 146}), 27: (1, {'@': 146}), 36: (1, {'@': 146}), 28: (1, {'@': 146}), 37: (1, {'@': 146}), 38: (1, {'@': 146}), 39: (1, {'@': 146}), 40: (1, {'@': 146}), 30: (1, {'@': 146}), 41: (1, {'@': 146}), 42: (1, {'@': 146}), 1: (1, {'@': 146}), 6: (1, {'@': 146}), 19: (1, {'@': 146}), 43: (1, {'@': 146}), 44: (1, {'@': 146}), 45: (1, {'@': 146}), 46: (1, {'@': 146}), 47: (1, {'@': 146}), 48: (1, {'@': 146}), 49: (1, {'@': 146}), 50: (1, {'@': 146}), 51: (1, {'@': 146}), 0: (1, {'@': 146}), 52: (1, {'@': 146}), 10: (1, {'@': 146}), 53: (1, {'@': 146}), 23: (1, {'@': 146}), 54: (1, {'@': 146}), 13: (1, {'@': 146})}, 197: {33: (1, {'@': 147}), 34: (1, {'@': 147}), 3: (1, {'@': 147}), 20: (1, {'@': 147}), 35: (1, {'@': 147}), 31: (1, {'@': 147}), 27: (1, {'@': 147}), 36: (1, {'@': 147}), 28: (1, {'@': 147}), 37: (1, {'@': 147}), 38: (1, {'@': 147}), 39: (1, {'@': 147}), 40: (1, {'@': 147}), 30: (1, {'@': 147}), 41: (1, {'@': 147}), 42: (1, {'@': 147}), 1: (1, {'@': 147}), 6: (1, {'@': 147}), 19: (1, {'@': 147}), 43: (1, {'@': 147}), 44: (1, {'@': 147}), 45: (1, {'@': 147}), 46: (1, {'@': 147}), 47: (1, {'@': 147}), 48: (1, {'@': 147}), 49: (1, {'@': 147}), 50: (1, {'@': 147}), 51: (1, {'@': 147}), 0: (1, {'@': 147}), 52: (1, {'@': 147}), 10: (1, {'@': 147}), 53: (1, {'@': 147}), 23: (1, {'@': 147}), 54: (1, {'@': 147}), 13: (1, {'@': 147})}, 198: {16: (0, 188), 0: (0, 1), 1: (0, 2), 2: (0, 3), 3: (0, 4), 4: (0, 5), 6: (0, 7), 7: (0, 8), 8: (0, 9), 9: (0, 10), 10: (0, 11), 11: (0, 12), 12: (0, 13), 13: (0, 14), 14: (0, 15), 15: (0, 16), 17: (0, 18), 18: (0, 19), 19: (0, 20), 20: (0, 21), 21: (0, 22), 22: (0, 23), 23: (0, 24), 24: (0, 25), 25: (0, 26), 26: (0, 27), 27: (0, 28), 28: (0, 29), 29: (0, 30), 30: (0, 31), 49: (0, 202), 31: (0, 32), 32: (0, 33)}, 199: {33: (1, {'@': 148}), 34: (1, {'@': 148}), 3: (1, {'@': 148}), 20: (1, {'@': 148}), 35: (1, {'@': 148}), 31: (1, {'@': 148}), 27: (1, {'@': 148}), 36: (1, {'@': 148}), 28: (1, {'@': 148}), 37: (1, {'@': 148}), 38: (1, {'@': 148}), 39: (1, {'@': 148}), 40: (1, {'@': 148}), 30: (1, {'@': 148}), 41: (1, {'@': 148}), 42: (1, {'@': 148}), 1: (1, {'@': 148}), 6: (1, {'@': 148}), 19: (1, {'@': 148}), 43: (1, {'@': 148}), 44: (1, {'@': 148}), 45: (1, {'@': 148}), 46: (1, {'@': 148}), 47: (1, {'@': 148}), 48: (1, {'@': 148}), 49: (1, {'@': 148}), 50: (1, {'@': 148}), 51: (1, {'@': 148}), 0: (1, {'@': 148}), 52: (1, {'@': 148}), 10: (1, {'@': 148}), 53: (1, {'@': 148}), 23: (1, {'@': 148}), 54: (1, {'@': 148}), 13: (1, {'@': 148})}, 200: {33: (1, {'@': 149}), 34: (1, {'@': 149}), 3: (1, {'@': 149}), 20: (1, {'@': 149}), 35: (1, {'@': 149}), 31: (1, {'@': 149}), 27: (1, {'@': 149}), 36: (1, {'@': 149}), 28: (1, {'@': 149}), 37: (1, {'@': 149}), 38: (1, {'@': 149}), 39: (1, {'@': 149}), 40: (1, {'@': 149}), 30: (1, {'@': 149}), 41: (1, {'@': 149}), 42: (1, {'@': 149}), 1: (1, {'@': 149}), 6: (1, {'@': 149}), 19: (1, {'@': 149}), 43: (1, {'@': 149}), 44: (1, {'@': 149}), 45: (1, {'@': 149}), 46: (1, {'@': 149}), 47: (1, {'@': 149}), 48: (1, {'@': 149}), 49: (1, {'@': 149}), 50: (1, {'@': 149}), 51: (1, {'@': 149}), 0: (1, {'@': 149}), 52: (1, {'@': 149}), 10: (1, {'@': 149}), 53: (1, {'@': 149}), 23: (1, {'@': 149}), 54: (1, {'@': 149}), 13: (1, {'@': 149})}, 201: {33: (1, {'@': 150}), 34: (1, {'@': 150}), 3: (1, {'@': 150}), 20: (1, {'@': 150}), 35: (1, {'@': 150}), 31: (1, {'@': 150}), 27: (1, {'@': 150}), 36: (1, {'@': 150}), 28: (1, {'@': 150}), 37: (1, {'@': 150}), 38: (1, {'@': 150}), 39: (1, {'@': 150}), 40: (1, {'@': 150}), 30: (1, {'@': 150}), 41: (1, {'@': 150}), 42: (1, {'@': 150}), 1: (1, {'@': 150}), 6: (1, {'@': 150}), 19: (1, {'@': 150}), 43: (1, {'@': 150}), 44: (1, {'@': 150}), 45: (1, {'@': 150}), 46: (1, {'@': 150}), 47: (1, {'@': 150}), 48: (1, {'@': 150}), 49: (1, {'@': 150}), 50: (1, {'@': 150}), 51: (1, {'@': 150}), 0: (1, {'@': 150}), 52: (1, {'@': 150}), 10: (1, {'@': 150}), 53: (1, {'@': 150}), 23: (1, {'@': 150}), 54: (1, {'@': 150}), 13: (1, {'@': 150})}, 202: {33: (1, {'@': 151}), 34: (1, {'@': 151}), 3: (1, {'@': 151}), 20: (1, {'@': 151}), 35: (1, {'@': 151}), 31: (1, {'@': 151}), 27: (1, {'@': 151}), 36: (1, {'@': 151}), 28: (1, {'@': 151}), 37: (1, {'@': 151}), 38: (1, {'@': 151}), 39: (1, {'@': 151}), 40: (1, {'@': 151}), 30: (1, {'@': 151}), 41: (1, {'@': 151}), 42: (1, {'@': 151}), 1: (1, {'@': 151}), 6: (1, {'@': 151}), 19: (1, {'@': 151}), 43: (1, {'@': 151}), 44: (1, {'@': 151}), 45: (1, {'@': 151}), 46: (1, {'@': 151}), 47: (1, {'@': 151}), 48: (1, {'@': 151}), 49: (1, {'@': 151}), 50: (1, {'@': 151}), 51: (1, {'@': 151}), 0: (1, {'@': 151}), 52: (1, {'@': 151}), 10: (1, {'@': 151}), 53: (1, {'@': 151}), 23: (1, {'@': 151}), 54: (1, {'@': 151}), 13: (1, {'@': 151})}}, 'start_states': {'root': 0}, 'end_states': {'root': 48}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}], 'ignore': ['WS_INLINE', '_COMMENT'], '__type__': 'LexerConf'}, 'start': ['root'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 96}, {'@': 71}, {'@': 70}, {'@': 52}, {'@': 73}, {'@': 54}, {'@': 69}, {'@': 45}, {'@': 53}, {'@': 60}, {'@': 78}, {'@': 125}, {'@': 58}, {'@': 141}, {'@': 59}, {'@': 104}, {'@': 105}, {'@': 48}, {'@': 90}, {'@': 119}, {'@': 51}, {'@': 91}, {'@': 93}, {'@': 92}, {'@': 94}, {'@': 47}, {'@': 89}, {'@': 88}, {'@': 56}, {'@': 100}, {'@': 101}, {'@': 99}, {'@': 42}, {'@': 122}, {'@': 123}, {'@': 80}, {'@': 64}, {'@': 50}, {'@': 57}, {'@': 41}, {'@': 44}, {'@': 43}, {'@': 62}, {'@': 46}, {'@': 76}, {'@': 77}, {'@': 98}, {'@': 151}, {'@': 148}, {'@': 149}, {'@': 135}, {'@': 147}, {'@': 134}, {'@': 136}, {'@': 116}, {'@': 87}, {'@': 146}, {'@': 132}, {'@': 133}, {'@': 114}, {'@': 131}, {'@': 113}, {'@': 115}, {'@': 86}, {'@': 68}, {'@': 137}, {'@': 118}, {'@': 130}, {'@': 111}, {'@': 110}, {'@': 83}, {'@': 112}, {'@': 85}, {'@': 67}, {'@': 63}, {'@': 40}, {'@': 61}, {'@': 55}, {'@': 49}, {'@': 102}, {'@': 75}, {'@': 81}, {'@': 109}, {'@': 150}, {'@': 142}, {'@': 143}, {'@': 126}, {'@': 106}, {'@': 144}, {'@': 127}, {'@': 128}, {'@': 107}, {'@': 79}, {'@': 65}, {'@': 120}, {'@': 95}, {'@': 72}, {'@': 139}, {'@': 121}, {'@': 97}, {'@': 117}, {'@': 138}, {'@': 66}, {'@': 84}, {'@': 74}, {'@': 124}, {'@': 103}, {'@': 140}, {'@': 129}, {'@': 145}, {'@': 82}, {'@': 108}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['root'], 'profile': False, 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'ID', 'pattern': {'value': '[a-zA-Z_][a-zA-Z0-9_]+|[a-zA-Z]', 'flags': [], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'DECIMAL', 'pattern': {'value': '[1-9][0-9]*|0', 'flags': [], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'FRACT', 'pattern': {'value': '[0-9]+\\.[0-9]+(e\\-?[0-9]+)?', 'flags': [], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'BIN', 'pattern': {'value': '0b[01]+', 'flags': [], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 4: {'name': 'HEX', 'pattern': {'value': '0x[0-9A-fa-f]+', 'flags': [], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 5: {'name': 'OCT', 'pattern': {'value': '0o[0-7]+', 'flags': [], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 6: {'name': 'TCHAR', 'pattern': {'value': '[^\n"\\\\\\{]|\\\\[ntvr]', 'flags': [], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'INFIX', 'pattern': {'value': '(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:\\+|\\-)|\\*)|/)|mod)|and)|or)|isnot)|is)|<=)|>=)|<)|>)', 'flags': [], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 8: {'name': '_COMMENT', 'pattern': {'value': '\\-\\-(?:[^\n])*', 'flags': [], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': '_NL', 'pattern': {'value': '(\r?\n)+\\s*', 'flags': [], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'WS_INLINE', 'pattern': {'value': '(?:(?:\\ |\t))+', 'flags': [], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': '__ANON_0', 'pattern': {'value': '=>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'IS', 'pattern': {'value': 'is', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': '__ANON_1', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': '__ANON_2', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'MOD', 'pattern': {'value': 'mod', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'VBAR', 'pattern': {'value': '|', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'DBLQUOTE', 'pattern': {'value': '"', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'TO', 'pattern': {'value': 'to', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'origin': {'name': 'num', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FRACT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': 'fractional', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 41: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': 'req', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 42: {'origin': {'name': 'molecule', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 43: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'call', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 44: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'accessor', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 45: {'origin': {'name': 'node', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 46: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 47: {'origin': {'name': 'sum', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 48: {'origin': {'name': 'equ', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'compare', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 49: {'origin': {'name': 'num', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HEX', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': 'hexadecimal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 50: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'num', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 51: {'origin': {'name': 'compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sum', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 52: {'origin': {'name': 'root', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'node', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 53: {'origin': {'name': 'stmt', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decl', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 54: {'origin': {'name': 'node', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 55: {'origin': {'name': 'num', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OCT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': 'octal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 56: {'origin': {'name': 'product', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'molecule', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 57: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'text', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 58: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'conj', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 59: {'origin': {'name': 'conj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'equ', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 60: {'origin': {'name': 'stmt', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'infix', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 61: {'origin': {'name': 'num', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BIN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': 'binary', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 62: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'field', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 63: {'origin': {'name': 'num', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DECIMAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': 'decimal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 64: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'list', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 65: {'origin': {'name': 'field', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': '__anon_plus_5', '__type__': 'NonTerminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 66: {'origin': {'name': '__anon_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 22, 'alias': None, 'options': None, '__type__': 'Rule'}, 67: {'origin': {'name': 'list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': 'node', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': 'root', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'node', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'root', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': None, '__type__': 'Rule'}, 73: {'origin': {'name': 'node', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stmt', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TCHAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': None, '__type__': 'Rule'}, 75: {'origin': {'name': 'text', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DBLQUOTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'DBLQUOTE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'pos', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'molecule', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'molecule', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'pow', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'range', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'TO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': '__anon_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': None, '__type__': 'Rule'}, 83: {'origin': {'name': 'list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': '__anon_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'atom', '__type__': 'NonTerminal'}], 'order': 22, 'alias': None, 'options': None, '__type__': 'Rule'}, 85: {'origin': {'name': 'list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'sum', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'sum', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'sum', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'product', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'sum', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'equ', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'compare', '__type__': 'NonTerminal'}, {'name': 'IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'equ', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'equ', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sum', '__type__': 'NonTerminal'}, {'name': 'LESSTHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'compare', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'lt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sum', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'compare', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'lte', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sum', '__type__': 'NonTerminal'}, {'name': 'MORETHAN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'compare', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'gt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'compare', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sum', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'compare', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'gte', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': None, '__type__': 'Rule'}, 96: {'origin': {'name': 'root', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 20, 'alias': None, 'options': None, '__type__': 'Rule'}, 98: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'product', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'molecule', '__type__': 'NonTerminal'}, {'name': 'MOD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'mod', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'product', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'molecule', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'product', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'molecule', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'product', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'text', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DBLQUOTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'DBLQUOTE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'TCHAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': None, '__type__': 'Rule'}, 104: {'origin': {'name': 'conj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'equ', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'conj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'conj', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'equ', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'disj', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': '__anon_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_plus_5', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}], 'order': 25, 'alias': None, 'options': None, '__type__': 'Rule'}, 109: {'origin': {'name': 'accessor', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': '__anon_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': None, '__type__': 'Rule'}, 118: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'equ', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'compare', '__type__': 'NonTerminal'}, {'name': 'IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'equ', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'nequ', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': None, '__type__': 'Rule'}, 121: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': None, '__type__': 'Rule'}, 122: {'origin': {'name': 'molecule', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'molecule', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'distribute', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'molecule', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INFIX', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'molecule', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'distribute', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': None, '__type__': 'Rule'}, 125: {'origin': {'name': 'infix', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': '__anon_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 24, 'alias': None, 'options': None, '__type__': 'Rule'}, 130: {'origin': {'name': 'list', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__anon_star_2', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__anon_star_1', '__type__': 'NonTerminal'}, {'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 12, 'alias': 'lambda', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': '__anon_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_1', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'ID', 'filter_out': False, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': None, '__type__': 'Rule'}, 139: {'origin': {'name': '__anon_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': None, '__type__': 'Rule'}, 140: {'origin': {'name': '__anon_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_3', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': None, '__type__': 'Rule'}, 141: {'origin': {'name': 'expr', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'conj', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'condition', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_4', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': '__anon_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__anon_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 24, 'alias': None, 'options': None, '__type__': 'Rule'}, 146: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__anon_star_4', '__type__': 'NonTerminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'node', '__type__': 'NonTerminal'}, {'name': '__anon_star_0', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'block', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
